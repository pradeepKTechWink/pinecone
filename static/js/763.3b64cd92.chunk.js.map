{"version":3,"file":"static/js/763.3b64cd92.chunk.js","mappings":"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","sources":["app/modules/custom/NoOfRecords.tsx","app/modules/custom/Pagination.tsx","app/modules/invitations/components/InvitationSearchComponent.tsx","app/modules/invitations/components/InvitationToolbar.tsx","app/modules/invitations/components/InvitationListHeader.tsx","app/modules/dropdown/DropdownCustomToggler.tsx","app/modules/dropdown/DropDownMenu1.tsx","app/modules/invitations/components/InvitationListTableRow.tsx","app/modules/invitations/components/DeleteConfirmationForBulk.tsx","app/modules/invitations/components/InvitationListTable.tsx","app/modules/invitations/InvitationList.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { FC } from 'react'\r\n\r\ntype Props = {\r\n    totalNoOfRecords: any\r\n    selectedPage: any\r\n    limit: number\r\n    entityName: string\r\n}\r\n\r\nconst NoOfRecords: FC<Props> = ({\r\n    totalNoOfRecords,\r\n    selectedPage,\r\n    limit,\r\n    entityName\r\n}) => {\r\n\r\n    return (\r\n        <div className='row user-numb'>\r\n            <div className='d-flex'>\r\n                <span className='fs-6'>{((selectedPage - 1) * limit) + 1}</span>\r\n                <span className='fs-6'>{'-'}</span>\r\n                <span className='fs-6'>{(selectedPage * limit) >= totalNoOfRecords ? totalNoOfRecords : (selectedPage * limit)}</span>\r\n                <span className='fs-6 ms-2'>of</span>\r\n                <span className='fs-6 ms-2'>{totalNoOfRecords}</span>\r\n                <span className='fs-6 ms-1'>{entityName}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {NoOfRecords}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { FC, useState } from 'react'\r\nimport clsx from 'clsx'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { KTSVG } from '../../../_metronic/helpers'\r\n\r\ntype Props = {\r\n    totalNumberOfPages: number\r\n    fetchNextData: Function\r\n    selectedPage: any\r\n    setSelectedPage: any\r\n    currentPage: any\r\n    setCurrentPage: any\r\n}\r\n\r\nconst Pagination: FC<Props> = ({ \r\n    totalNumberOfPages, \r\n    setSelectedPage, \r\n    fetchNextData, \r\n    selectedPage, \r\n    currentPage,\r\n    setCurrentPage\r\n}) => {\r\n\r\n    const handleChange = (event: any) => {\r\n        setSelectedPage(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className='row'>\r\n            <div className='d-flex'>\r\n                {currentPage > 1 && \r\n                    <button \r\n                        style={{ \r\n                            border: '#0000',\r\n                            background: '#009ef7',\r\n                            borderRadius: '5px',\r\n                            color: '#fff',\r\n                            height: '30px',\r\n                            fontSize: '15px'\r\n                        }}\r\n                        onClick={() => fetchNextData(selectedPage - 1)}\r\n                        disabled={selectedPage == 1}\r\n                    >\r\n                        Prev\r\n                    </button>\r\n                }\r\n                <div className='d-flex my-auto'>\r\n                    <div className='ms-4 d-flex flex-column'>\r\n                        <input \r\n                            type=\"text\" \r\n                            style={{ width: '40px', height: '28px', borderColor: '#0000', textAlign: 'center' }}\r\n                            value={ selectedPage }\r\n                            onChange={(event) => handleChange(event)}\r\n                            disabled={totalNumberOfPages <= 1}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <span style={{ marginTop: '5px' }} className='ms-2 me-3'>Of</span>\r\n                    <span style={{ marginTop: '5px' }} className='ms-1 me-4'>{totalNumberOfPages}</span>\r\n                </div>\r\n                {currentPage < totalNumberOfPages && \r\n                    <button \r\n                        style={{ \r\n                            border: '#0000',\r\n                            background: '#009ef7',\r\n                            borderRadius: '5px',\r\n                            color: '#fff',\r\n                            height: '30px',\r\n                            fontSize: '15px'\r\n                        }}\r\n                        onClick={() => fetchNextData(parseInt(selectedPage) + 1)}\r\n                        disabled={selectedPage == totalNumberOfPages}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                }\r\n\r\n                {totalNumberOfPages > 1 && \r\n                    <button \r\n                        className='ms-4'\r\n                        style={{ \r\n                            border: '#0000',\r\n                            background: '#009ef7',\r\n                            borderRadius: '5px',\r\n                            color: '#fff',\r\n                            height: '30px',\r\n                            fontSize: '15px'\r\n                        }}\r\n                        onClick={() => fetchNextData(selectedPage)}\r\n                    >\r\n                        Go to\r\n                    </button>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Pagination}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useEffect, useState} from 'react'\r\nimport {initialQueryState, KTIcon, useDebounce} from '../../../../_metronic/helpers'\r\n\r\nconst InvitationSearchComponent = (props: any) => {\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      <div className='user-manager-header'>\r\n        {/* begin::Search */}\r\n        <div className='d-flex align-items-center position-relative my-1'>\r\n          <KTIcon iconName='magnifier' className='fs-1 position-absolute ms-6' />\r\n          <input\r\n            type='text'\r\n            data-kt-user-table-filter='search'\r\n            className='form-control form-control-solid w-250px ps-14'\r\n            placeholder='Search user'\r\n            value={props.searchString}\r\n            onChange={(e) => props.handleSearchBarChange(e)}\r\n          />\r\n        </div>\r\n        {/* end::Search */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {InvitationSearchComponent}\r\n","import {KTIcon} from '../../../../_metronic/helpers'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst InvitationToolbar = (props: any) => {\r\n    const navigate = useNavigate()\r\n    return (\r\n        <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n            {/* begin::Add user */}\r\n            <button type='button' className='btn btn-primary' onClick={() => navigate('/invite-users')}>\r\n                <KTIcon iconName='plus' className='fs-2' />\r\n                Invite Users\r\n            </button>\r\n            {/* end::Add user */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {InvitationToolbar}\r\n","import { AnyNaptrRecord } from 'dns'\r\nimport {InvitationSearchComponent} from './InvitationSearchComponent'\r\nimport { InvitationToolbar } from './InvitationToolbar'\r\n\r\nconst InvitationListHeader = (props: any) => {\r\n\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <InvitationSearchComponent \r\n        searchString={props.searchString}\r\n        handleSearchBarChange={props.handleSearchBarChange}\r\n        noOfRecords={props.noOfRecords}\r\n      />\r\n\r\n      <div className='card-toolbar'>\r\n        <InvitationToolbar noOfRecords={props.noOfRecords} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {InvitationListHeader}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\n\r\nexport const DropdownCustomToggler = React.forwardRef((props: any, ref: any) => {\r\n  return (\r\n    <a\r\n      ref={ref}\r\n      className=\"btn btn-clean btn-hover-light-primary btn-sm btn-icon\"\r\n      onClick={e => {\r\n        e.preventDefault();\r\n        props.onClick(e);\r\n      }}\r\n    >\r\n      {props.children}\r\n    </a>\r\n  );\r\n});\r\n","/* eslint-disable no-script-url,jsx-a11y/anchor-is-valid */\r\n\r\nexport function DropdownMenu1(props: any) {\r\n\r\n    return (<>\r\n        {/*begin::Navigation*/}\r\n        <span className=\"navi navi-hover\" style={{paddingLeft: 0}}>\r\n            <li \r\n                className=\"navi-item cursor-pointer py-2 text-dark\" \r\n                style={{ listStyleType: \"none\" }} \r\n                onClick={() => props.resendInvitation(props.email)}>\r\n                <span className=\"navi-link\">\r\n                    <span className=\"navi-text ms-6 text-dark\">\r\n                        Resend\r\n                        {props.resending && <span className='spinner-border spinner-border-sm align-middle ms-2'></span>}\r\n                    </span>\r\n                </span>\r\n            </li>\r\n            <div className='separator'></div>\r\n            <li \r\n                className=\"navi-item cursor-pointer py-2 text-dark\" \r\n                style={{ listStyleType: \"none\" }} \r\n                onClick={() => props.openDialogForSingleDeletion(`delete-invitation-${props.id}`)}>\r\n                <span className=\"navi-link\">\r\n                    <span className=\"navi-text ms-6 text-dark\">Delete</span>\r\n                </span>\r\n            </li>\r\n        </span>\r\n        {/*end::Navigation*/}\r\n    </>);\r\n}\r\n","import { Dropdown } from 'react-bootstrap'\r\nimport {KTIcon} from '../../../../_metronic/helpers'\r\nimport { DropdownCustomToggler } from '../../dropdown/DropdownCustomToggler'\r\nimport { DropdownMenu1 } from '../../dropdown/DropDownMenu1'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n\r\nexport const InvitationListTableRow = (props: any) => {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>\r\n                    <div className=\"ms-3 form-check form-check-sm form-check-custom form-check-solid\">\r\n                        <input \r\n                            id='kt_table_users' \r\n                            className=\"form-check-input\" \r\n                            type=\"checkbox\" \r\n                            checked={props.selected}\r\n                            value={props.id}\r\n                            onChange={(e) => props.handleChange(e)} \r\n                        />\r\n                    </div>\r\n                </td>\r\n                <td className=\"text-gray-800 text-start\">{props.email}</td>\r\n                <td className=\"text-gray-800 text-center\">{props.role}</td>\r\n                <td className=\"text-gray-800 text-center\">{props.status}</td>\r\n                <td className=\"text-gray-800 text-center\"><>{new Date(props.created).toLocaleDateString()}</></td> \r\n\r\n                {!props.userId && \r\n                    <td className='text-center min-w-100px actions'>\r\n                        <Dropdown className=\"dropdown dropdown-inline\" drop={\"down\"}>\r\n                            <Dropdown.Toggle\r\n                                className=\"\"\r\n                                variant=\"transparent\"\r\n                                id=\"dropdown-toggle-top-user-profile\"\r\n                                as={DropdownCustomToggler}\r\n                            >\r\n                                <span\r\n                                    className='btn btn-light btn-active-light-primary btn-sm'\r\n                                >\r\n                                    Actions\r\n                                </span>\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu className=\"dropdown-menu dropdown-menu-sm dropdown-menu-right mt-1\">\r\n                                <DropdownMenu1 \r\n                                    id={props.id}\r\n                                    email={props.email}\r\n                                    resendInvitation={props.resendInvitation}\r\n                                    openDialogForSingleDeletion={props.openDialogForSingleDeletion}\r\n                                    resending={props.resending}\r\n                                />\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                  </td>\r\n                }\r\n                {props.userId && \r\n                    <td className='text-center min-w-100px actions'>\r\n                        <span\r\n                            className='btn btn-light btn-active-light-primary btn-sm'\r\n                            onClick={() => navigate('/user-detail', {state: props.userId})}\r\n                        >\r\n                            View User\r\n                        </span>\r\n                    </td>\r\n                }\r\n            </tr>\r\n        </>\r\n    )\r\n}","import { FormattedMessage } from \"react-intl\"\r\n\r\nconst DeleteConfirmationBox = (props: any) => {\r\n    return (\r\n        <div id={`delete-invitations`} style={{ display: 'none' }} className=\"modal\">\r\n            <span onClick={() => props.closeDialog(`delete-invitations`)} className=\"close\" title=\"Close Modal\">&times;</span>\r\n            <form className=\"modal-content\">\r\n                <div className=\"px-7 py-7\">\r\n                    <h3 className='text-center'>\r\n                        Delete Users\r\n                    </h3>\r\n\r\n                    <p className='font-size-15 text-center'>\r\n                        Are you sure that you wanted to delete the selected users?\r\n                    </p>\r\n\r\n                    <div className=\"d-flex justify-content-center\">\r\n                        <button \r\n                            onClick={() => props.closeDialog('delete-invitations')}\r\n                            type=\"button\" \r\n                            className=\"btn btn-primary\"\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button \r\n                            onClick={() => props.handleBulkDeletion()} \r\n                            type=\"button\" \r\n                            className=\"btn btn-danger ms-3\"\r\n                        >\r\n                            Delete\r\n\r\n                            {props.deleting && \r\n                                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {DeleteConfirmationBox}","import {useState, useEffect} from 'react'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { InvitationListTableRow } from './InvitationListTableRow'\r\nimport { DeleteConfirmationBox } from './DeleteConfirmationForBulk'\r\nimport { Pagination } from '../../custom/Pagination'\r\nimport { NoOfRecords } from '../../custom/NoOfRecords'\r\nimport { AlertDanger } from '../../alerts/Alerts'\r\nimport { deleteInvitations, deleteInvitation } from '../api'\r\nimport { useAuth } from '../../auth'\r\nimport { CustomCircularProgress } from '../../custom/CustomCircularProgress'\r\n\r\nconst roleToIdMap: any = {\r\n    '1' : 'Administrator',\r\n    '2' : 'User',\r\n    '3' : 'View Only'\r\n}\r\n\r\nconst InvitationListTable = (props: any) => {\r\n    const { currentUser } = useAuth()\r\n\r\n    useEffect(() => {\r\n        if(props.invitationList) {\r\n            if(props.deleteRecord.length !== props.invitationList.length) {\r\n                props.setSelectedAll(false)\r\n            }\r\n            if(props.deleteRecord.length === props.invitationList.length && props.invitationList.length > 0) {\r\n                props.setSelectedAll(true)\r\n            }\r\n        }\r\n    }, [props.deleteRecord])\r\n\r\n    const handleChangeSelected = async (id: string) => {\r\n        console.log(id)\r\n        let newinvitationList: Array<any> = []\r\n        props.invitationList.map((invitation: any) => {\r\n            if(invitation.id != id) {\r\n                newinvitationList = [...newinvitationList, invitation]\r\n            } else {\r\n                console.log(invitation)\r\n                const newInvitation = invitation\r\n                const selected = !newInvitation.selected\r\n                newInvitation.selected = selected\r\n\r\n                console.log(newInvitation)\r\n                newinvitationList.push(newInvitation)\r\n            }\r\n        })\r\n        console.log(newinvitationList)\r\n        props.setInvitationList(newinvitationList)\r\n    }\r\n\r\n    const handleChange = async (e: any) => {\r\n        await handleChangeSelected(e.target.value)\r\n        if(e.target.checked) {\r\n            props.setDeleteRecord((record: any) => {\r\n                return [\r\n                    ...record,\r\n                    e.target.value\r\n                ]\r\n            })\r\n        } else {\r\n            props.setDeleteRecord((record: any) => {\r\n                const newRecord = record.filter((rec: any) => {\r\n                    return rec !== e.target.value\r\n                })\r\n                return newRecord\r\n            })\r\n        }\r\n    }\r\n\r\n    const openDialog = (id: string) => {\r\n        const element: HTMLElement = document.getElementById(id)!\r\n        element.style.display='block'\r\n    }\r\n\r\n    const closeDialog = (id: string) => {\r\n        const element: HTMLElement = document.getElementById(id)!\r\n        element.style.display='none'\r\n    }\r\n\r\n    const handleSelectAll = (event: any) => {\r\n        if(event.target.checked) {\r\n            props.setSelectedAll(true)\r\n            const newinvitationList: Array<any> = []\r\n            const newDeleteRecord: Array<string> = []\r\n            props.invitationList.map((invitation: any) => {\r\n                newinvitationList.push(props.handleChangeSelection(invitation.id, true))\r\n                newDeleteRecord.push(invitation.id)\r\n            })\r\n            props.setInvitationList(newinvitationList)\r\n            props.setDeleteRecord(newDeleteRecord)\r\n        } else {\r\n            props.setSelectedAll(false)\r\n            const newinvitationList: Array<any> = []\r\n            props.invitationList.map((invitation: any) => {\r\n                newinvitationList.push(props.handleChangeSelection(invitation.id, false))\r\n            })\r\n            props.setInvitationList(newinvitationList)\r\n            props.setDeleteRecord([])\r\n        }\r\n    }\r\n\r\n    const openDialogForSingleDeletion = (id: string) => {\r\n        const element: HTMLElement = document.getElementById(id)!\r\n        element.style.display='block'\r\n    }\r\n    \r\n    const closeDialogForSingleDeletion = (id: string) => {\r\n        const element: HTMLElement = document.getElementById(id)!\r\n        element.style.display='none'\r\n    }\r\n\r\n    const handleBulkDeletion = () => {\r\n        props.setDeleting(true)\r\n        deleteInvitations(props.deleteRecord, currentUser?.companyId, props.limit)\r\n        .then((response: any) => {\r\n            if(response.data.success) {\r\n                localStorage.setItem('responsesuccessmsg', response.data.message)\r\n                window.location.reload();\r\n            } else {\r\n                if(response.data.message) {\r\n                    localStorage.setItem('responsefailuresmsg', response.data.message)\r\n                    window.location.reload();\r\n                } else {\r\n                    localStorage.setItem('responsefailuresmsg', 'Failed to delete users')\r\n                    window.location.reload();\r\n                }\r\n            }\r\n        })\r\n        .then(() => {\r\n            props.setDeleteRecord([])\r\n            closeDialog('delete-invitations')\r\n            props.setDeleting(false)\r\n            if(props.selectedAll) {\r\n                props.setSelectedAll(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleSingleDeletion = (invitationId: any) => {\r\n        props.setDeleting(true)\r\n        deleteInvitation(invitationId, currentUser?.companyId, props.limit)\r\n        .then((response: any) => {\r\n            if(response.data.success) {\r\n                    props.setInvitationList(response.data.invitationList)\r\n                    props.setTotNumOfPage(response.data.totalPageNum)\r\n                    props.setNoOfRecords(response.data.noOfRecords)\r\n                    props.setSuccessResMessage(response.data.message)\r\n            } else {\r\n                if(response.data.message) {\r\n                    props.setFailureResMessage(response.data.message)\r\n                }\r\n            }\r\n        })\r\n        .then(() => {\r\n            closeDialogForSingleDeletion(`delete-invitation-${invitationId}`)\r\n            props.setDeleting(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"community-user-table\" className=\"card\" style={{ overflowX: 'auto'}}>\r\n                {props.warnings != \"\" && \r\n                    <AlertDanger message={props.warnings} checked={props.showWarnings} />\r\n                }\r\n                {props.deleteRecord.length > 0 &&\r\n                    <div className=\"card-header border-0 pt-6\">\r\n                        <div className=\"card-toolbar\">\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                    {props.deleteRecord.length > 0 && \r\n                                        <div className=\"d-flex justify-content-end align-items-center\">\r\n                                            <div className=\"fw-bolder me-5\">\r\n                                            <span className=\"me-2\">{props.deleteRecord.length}</span>Selected</div>\r\n                                            <button type=\"button\" onClick={() => openDialog('delete-invitations')} className=\"btn btn-danger\">\r\n                                                Delete Selected\r\n                                            </button>\r\n                                        </div>\r\n                                    }\r\n                                    <DeleteConfirmationBox\r\n                                        closeDialog={closeDialog}\r\n                                        deleting={props.deleting}\r\n                                        handleBulkDeletion={handleBulkDeletion}\r\n                                    />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <div className=\"card-body\">\r\n                    <table className=\"table mb-10 align-middle table-row-dashed fs-6 gy-5 px-3\" id=\"kt_table_users\">\r\n                        <thead className=\"pe-5\">\r\n                            <tr className=\"text-start text-muted fw-bolder fs-7 text-uppercase gs-0\">\r\n                                <th className=\"w-10px pe-2\">\r\n                                    <div className=\"ms-3 form-check form-check-sm form-check-custom form-check-solid me-3\">\r\n                                        <input className=\"form-check-input\" onChange={(e) => handleSelectAll(e)} type=\"checkbox\" checked={props.selectedAll} />\r\n                                    </div>\r\n                                </th>\r\n                                \r\n                                <th className=\"min-w-125px\">\r\n                                    User Email\r\n                                </th>\r\n                                <th className=\"text-center min-w-125px\">\r\n                                    User Role\r\n                                </th>\r\n                                <th className=\"text-center min-w-125px\">\r\n                                    Invitation Status\r\n                                </th>\r\n                                <th className=\"text-center min-w-125px\">Date Sent</th>\r\n                                <th className='min-w-100px text-center'>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {!props.loading && \r\n                            <tbody className=\"text-gray-600 fw-bold\">\r\n                                <>\r\n                                    {props.invitationList.map((data: any) => (\r\n                                        <>\r\n                                        <InvitationListTableRow \r\n                                            id={data.id}\r\n                                            userId={data.userId}\r\n                                            email={data.email}\r\n                                            role={roleToIdMap[data.role.toString()]}\r\n                                            status={data.status}\r\n                                            created={data.created}\r\n                                            selected={data.selected}\r\n                                            openDialogForSingleDeletion={openDialogForSingleDeletion}\r\n                                            handleChange={handleChange}\r\n                                            resendInvitation={props.resendInvitation}\r\n                                            resending={props.resending}\r\n                                        />\r\n\r\n                                        <div id={`delete-invitation-${data.id}`} style={{ display: 'none' }} className=\"modal\">\r\n                                            <span onClick={() => closeDialogForSingleDeletion(`delete-invitation-${data.id}`)} className=\"close\" title=\"Close Modal\">&times;</span>\r\n                                            <form className=\"modal-content bg-white\">\r\n                                                <div className=\"px-7 py-7\">\r\n                                                    <h3>\r\n                                                        Delete User\r\n                                                    </h3>\r\n                                                    <p className='font-size-15'>\r\n                                                        Are you sure that you want to delete the selected user?\r\n                                                    </p>\r\n                    \r\n                                                    <div className=\"d-flex\">\r\n                                                        <button onClick={() => closeDialogForSingleDeletion(`delete-invitation-${data.id}`)} type=\"button\" className=\"btn btn-primary\">\r\n                                                            Cancel\r\n                                                        </button>\r\n                                                        <button \r\n                                                            onClick={() => handleSingleDeletion(data.id)} \r\n                                                            type=\"button\" \r\n                                                            className=\"btn btn-danger ms-3\"\r\n                                                        >\r\n                                                            Delete\r\n\r\n                                                            {props.deleting && <span className='spinner-border spinner-border-sm align-middle ms-2'></span>}\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </form>\r\n                                        </div>\r\n                                        </>\r\n                                    ))}\r\n                                </>\r\n                            </tbody>\r\n                        }\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            {!props.loading && props.noOfRecords > 0 &&\r\n                <div className='px-15 user-pagination mt-5 mb-5'>\r\n                    <NoOfRecords \r\n                        totalNoOfRecords={props.noOfRecords}\r\n                        selectedPage={props.selectedPage}\r\n                        limit={props.limit}\r\n                        entityName={'users'}\r\n                    />\r\n\r\n                    {props.totNumOfPage > 1 && \r\n                        <Pagination \r\n                            totalNumberOfPages={props.totNumOfPage}\r\n                            fetchNextData={props.fetchNextData}\r\n                            selectedPage={props.selectedPage}\r\n                            setSelectedPage={props.setSelectedPage}\r\n                            currentPage={props.currentPage}\r\n                            setCurrentPage={props.setCurrentPage}\r\n                        />\r\n                    }\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport {InvitationListTable}","import {useState, useEffect} from 'react'\r\nimport {KTCard} from '../../../_metronic/helpers'\r\nimport {InvitationListHeader} from './components/InvitationListHeader'\r\nimport { InvitationListTable } from './components/InvitationListTable'\r\nimport { getInvitationList, resendInvitation } from './api'\r\nimport { useAuth } from '../auth'\r\nimport { AlertDanger, AlertSuccess } from '../alerts/Alerts'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst InvitationList = () => {\r\n    const [loading, setLoading] = useState<boolean>(true)\r\n    const [resending, setResending] = useState<boolean>(false)\r\n    const [offset] = useState<number>(0)\r\n    const [limit] = useState<number>(10)\r\n    const navigate = useNavigate()\r\n    const [invitationList, setInvitationList] = useState<Array<any>>([])\r\n    const {currentUser, auth} = useAuth()\r\n    const [selectedPage, setSelectedPage] = useState<any>(1)\r\n    const [currentPage, setCurrentPage] = useState<any>(1)\r\n    const[totNumOfPage, setTotNumOfPage] = useState<any>(0)\r\n    const[noOfRecords, setNoOfRecords] = useState<any>(0)\r\n    const [warnings, setWarnings] = useState<string>(\"\")\r\n    const [showWarnings, setShowWarnings] = useState<boolean>(false)\r\n    const [searchString, setSearchString] = useState<string>(\"\")\r\n    const [successResMessage, setSuccessResMessage] = useState<string>('')\r\n    const [failureResMessage, setFailureResMessage] = useState<string>('')\r\n    const [checked, setChecked] = useState<boolean>(true)\r\n    const [checked1, setChecked1] = useState<boolean>(true)\r\n    const [deleteRecord, setDeleteRecord] = useState<Array<string>>([])\r\n    const [selectedAll, setSelectedAll] = useState<boolean>(false)\r\n    const [deleting, setDeleting] = useState<boolean>(false)\r\n\r\n    let responseSuccessMessage = localStorage.getItem(\"responsesuccessmsg\");\r\n    let responseFailureMessage = localStorage.getItem(\"responsefailuresmsg\")\r\n\r\n    const [resSuccessMessage, setResSuccessMessage] = useState(responseSuccessMessage);\r\n    const [resFailureMessage, setResFailureMessage] = useState(responseFailureMessage);\r\n\r\n    if(warnings != \"\") {\r\n        setTimeout(() => {\r\n          setShowWarnings(false);\r\n          setTimeout(() => {\r\n            setWarnings(\"\");\r\n          }, 300);\r\n        }, 5000);\r\n    }\r\n\r\n    if(successResMessage) {\r\n        setTimeout(() => {\r\n            setChecked(false)\r\n            setTimeout(() => {\r\n                setSuccessResMessage(\"\");\r\n            }, 200);\r\n        }, 5000);\r\n    }\r\n    \r\n    if(failureResMessage) {\r\n        setTimeout(() => {\r\n            setChecked(false)\r\n            setTimeout(() => {\r\n                setFailureResMessage(\"\");\r\n            }, 200);\r\n        }, 5000);\r\n    }\r\n\r\n    if(responseSuccessMessage) {\r\n        setTimeout(() => {\r\n          localStorage.removeItem(\"responsesuccessmsg\");\r\n          setChecked1(false);\r\n          setTimeout(() => {\r\n            setResSuccessMessage(\"\");\r\n          }, 300);\r\n        }, 5000);\r\n    }\r\n    \r\n    if(responseFailureMessage) {\r\n        setTimeout(() => {\r\n            localStorage.removeItem(\"responsefailuresmsg\");\r\n            setChecked1(false);\r\n            setTimeout(() => {\r\n                setResFailureMessage(\"\");\r\n            }, 300);\r\n        }, 5000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(auth?.user?.role != 1) {\r\n          navigate('/error/404')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getInvitationList(\r\n            searchString,\r\n            offset,\r\n            limit,\r\n            currentUser?.companyId\r\n        )\r\n        .then((response) => {\r\n            if(response.data.success) {\r\n                setInvitationList(response.data.invitationList)\r\n                setTotNumOfPage(response.data.totalPageNum)\r\n                setNoOfRecords(response.data.noOfRecords)\r\n                setSelectedPage(1)\r\n                setCurrentPage(1)\r\n                setLoading(false)\r\n            }\r\n        })\r\n    }, [searchString])\r\n\r\n    const handleChangeSelection = (id: string, selectOption: boolean) => {\r\n        const findInvitation = invitationList.find((invitation: any) => {\r\n            return invitation.id === id\r\n        })\r\n        findInvitation.selected = selectOption\r\n        return findInvitation\r\n    }\r\n\r\n    const fetchNextData = (pageNum: any) => {\r\n        if(pageNum > 0 && pageNum <= totNumOfPage) {\r\n            setLoading(true)\r\n            if(deleteRecord.length > 0) {\r\n                setSelectedAll(false)\r\n                const newinvitationList: Array<any> = []\r\n                invitationList.map((invitation: any) => {\r\n                    newinvitationList.push(handleChangeSelection(invitation.id, false))\r\n                })\r\n                setInvitationList(newinvitationList)\r\n                setDeleteRecord([])\r\n            }\r\n            const skip = (parseInt(pageNum) - 1) * limit\r\n\r\n            getInvitationList(\r\n                searchString,\r\n                skip,\r\n                limit,\r\n                currentUser?.companyId,\r\n            )\r\n            .then((response) => {\r\n                if(response.data.success) {\r\n                    setInvitationList(response.data.invitationList)\r\n                    setTotNumOfPage(response.data.totalPageNum)\r\n                    setNoOfRecords(response.data.noOfRecords)\r\n                    setLoading(false)\r\n                    setSelectedPage(pageNum)\r\n                    setCurrentPage(pageNum)\r\n                }\r\n            })\r\n           \r\n        } else {\r\n            setWarnings('Invalid page number provided, please check it.')\r\n            setShowWarnings(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchBarChange = (event: any) => {\r\n        setSearchString(event.target.value)\r\n    }\r\n\r\n    const _resendInvitation = (email:string) => {\r\n        setResending(true)\r\n        resendInvitation(email, currentUser?.companyId, offset, limit)\r\n        .then((response) => {\r\n            if(response.data.success) {\r\n                setInvitationList(response.data.invitationList)\r\n                setTotNumOfPage(response.data.totalPageNum)\r\n                setNoOfRecords(response.data.noOfRecords)\r\n                setLoading(false)\r\n                setSuccessResMessage(response.data.message)\r\n                setChecked(true)\r\n                setResending(false)\r\n            } else {\r\n                setFailureResMessage(response.data.message)\r\n                setChecked(true)\r\n                setResending(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {successResMessage !== undefined && successResMessage !== null && successResMessage !== \"\" ? (\r\n                <AlertSuccess message={successResMessage} checked={checked} />\r\n            ) : null }\r\n\r\n            {failureResMessage !== undefined && failureResMessage !== null && failureResMessage !== \"\" ? (\r\n                <AlertDanger message={failureResMessage} checked={checked} />\r\n            ) : null }\r\n\r\n            {resSuccessMessage !== null && resSuccessMessage !== undefined && resSuccessMessage !== \"\"  ? (\r\n                <AlertSuccess message={resSuccessMessage} checked={checked1} />\r\n            ) : null}\r\n\r\n            {resFailureMessage !== null && resFailureMessage !== undefined && resFailureMessage !== \"\"  ? (\r\n                <AlertDanger message={resFailureMessage} checked={checked1} />\r\n            ) : null}\r\n\r\n            <KTCard>\r\n                <InvitationListHeader \r\n                    searchString={searchString}\r\n                    handleSearchBarChange={handleSearchBarChange}\r\n                    noOfRecords={noOfRecords}\r\n                />\r\n                <InvitationListTable \r\n                    warnings={warnings}\r\n                    showWarnings={showWarnings}\r\n                    loading={loading}\r\n                    invitationList={invitationList}\r\n                    setInvitationList={setInvitationList}\r\n                    totNumOfPage={totNumOfPage}\r\n                    setTotNumOfPage={setTotNumOfPage}\r\n                    fetchNextData={fetchNextData}\r\n                    selectedPage={selectedPage}\r\n                    setSelectedPage={setSelectedPage}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    successResMessage={successResMessage}\r\n                    setSuccessResMessage={setSuccessResMessage}\r\n                    failureResMessage={failureResMessage}\r\n                    setFailureResMessage={setFailureResMessage}\r\n                    deleteRecord={deleteRecord}\r\n                    setDeleteRecord={setDeleteRecord}\r\n                    selectedAll={selectedAll}\r\n                    setSelectedAll={setSelectedAll}\r\n                    deleting={deleting}\r\n                    setDeleting={setDeleting}\r\n                    handleChangeSelection={handleChangeSelection}\r\n                    limit={limit}\r\n                    resendInvitation={_resendInvitation}\r\n                    setChecked={setChecked}\r\n                    setChecked1={setChecked1}\r\n                    setResSuccessMessage={setResSuccessMessage}\r\n                    setResFailureMessage={setResFailureMessage}\r\n                    setNoOfRecords={setNoOfRecords}\r\n                    resending={resending}\r\n                    noOfRecords={noOfRecords}\r\n                />\r\n            </KTCard>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvitationList"],"names":["NoOfRecords","totalNoOfRecords","selectedPage","limit","entityName","className","Pagination","totalNumberOfPages","setSelectedPage","fetchNextData","currentPage","setCurrentPage","style","border","background","borderRadius","color","height","fontSize","onClick","disabled","type","width","borderColor","textAlign","value","onChange","event","target","handleChange","marginTop","parseInt","InvitationSearchComponent","props","iconName","placeholder","searchString","e","handleSearchBarChange","InvitationToolbar","navigate","useNavigate","InvitationListHeader","noOfRecords","DropdownCustomToggler","React","ref","preventDefault","children","DropdownMenu1","paddingLeft","listStyleType","resendInvitation","email","resending","openDialogForSingleDeletion","id","InvitationListTableRow","checked","selected","role","status","Date","created","toLocaleDateString","userId","Dropdown","drop","variant","as","state","DeleteConfirmationBox","display","closeDialog","title","handleBulkDeletion","deleting","roleToIdMap","InvitationListTable","currentUser","useAuth","useEffect","invitationList","deleteRecord","length","setSelectedAll","handleChangeSelected","console","log","newinvitationList","map","invitation","newInvitation","push","setInvitationList","setDeleteRecord","record","filter","rec","document","getElementById","closeDialogForSingleDeletion","overflowX","warnings","message","showWarnings","setDeleting","deleteInvitations","companyId","then","response","data","success","localStorage","setItem","window","location","reload","selectedAll","newDeleteRecord","handleChangeSelection","handleSelectAll","loading","toString","invitationId","deleteInvitation","setTotNumOfPage","totalPageNum","setNoOfRecords","setSuccessResMessage","setFailureResMessage","totNumOfPage","useState","setLoading","setResending","offset","auth","setWarnings","setShowWarnings","setSearchString","successResMessage","failureResMessage","setChecked","checked1","setChecked1","responseSuccessMessage","getItem","responseFailureMessage","resSuccessMessage","setResSuccessMessage","resFailureMessage","setResFailureMessage","setTimeout","removeItem","user","getInvitationList","selectOption","findInvitation","find","undefined","pageNum","skip"],"sourceRoot":""}