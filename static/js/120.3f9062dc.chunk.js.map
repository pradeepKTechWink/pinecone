{"version":3,"file":"static/js/120.3f9062dc.chunk.js","mappings":"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","sources":["app/modules/invitations/InviteUsers.tsx"],"sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {useState, useEffect} from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport * as Yup from 'yup'\r\nimport clsx from 'clsx'\r\nimport {Link} from 'react-router-dom'\r\nimport {useFormik} from 'formik'\r\nimport {sendInvitation} from '../auth/core/_requests'\r\nimport {toAbsoluteUrl} from '../../../_metronic/helpers'\r\nimport {useAuth} from '../auth/core/Auth'\r\nimport { AlertDanger, AlertSuccess } from '../alerts/Alerts'\r\n\r\nconst invitationSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Wrong email format')\r\n    .min(5, 'Minimum 5 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('Email is required'),\r\n  role: Yup.string()\r\n    .min(1, 'Minimum 1 characters')\r\n    .max(1, 'Maximum 1 characters')\r\n    .required('Password is required'),\r\n})\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  role: '',\r\n}\r\n\r\n/*\r\n  Formik+YUP+Typescript:\r\n  https://jaredpalmer.com/formik/docs/tutorial#getfieldprops\r\n  https://medium.com/@maurice.de.beijer/yup-validation-and-typescript-and-formik-6c342578a20e\r\n*/\r\n\r\nexport default function InviteUsers() {\r\n  const [loading, setLoading] = useState(false)\r\n  const {currentUser, auth} = useAuth()\r\n  const navigate = useNavigate()\r\n\r\n  const [checked, setChecked] = useState<boolean>(false)\r\n  const [successMessage, setSuccessMessage] = useState<string>(\"\")\r\n  const [errorMessage, setErrorMessage] = useState<string>(\"\")\r\n\r\n  useEffect(() => {\r\n    if(auth?.user?.role != 1) {\r\n      navigate('/error/500')\r\n    }\r\n  }, [])\r\n\r\n  if(successMessage !== \"\") {\r\n    setTimeout(() => {\r\n      setChecked(false);\r\n      setTimeout(() => {\r\n        setSuccessMessage(\"\");\r\n      }, 200);\r\n    }, 5000);\r\n  }\r\n\r\n  if(errorMessage !== \"\") {\r\n    setTimeout(() => {\r\n      setChecked(false);\r\n      setTimeout(() => {\r\n        setErrorMessage(\"\");\r\n      }, 200);\r\n    }, 5000);\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: invitationSchema,\r\n    onSubmit: async (values, {setStatus, setSubmitting}) => {\r\n      setLoading(true)\r\n      sendInvitation(\r\n        currentUser?.id,\r\n        values.email,\r\n        values.role,\r\n        currentUser?.companyId\r\n      )\r\n      .then((response) => {\r\n        if(response.data.success) {\r\n          setSuccessMessage(response.data.message)\r\n          setChecked(true)\r\n          setLoading(false)\r\n        } else {\r\n          setErrorMessage(response.data.message)\r\n          setChecked(true)\r\n          setLoading(false)\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setErrorMessage('Failed to send invitation')\r\n        setChecked(true)\r\n        setLoading(false)\r\n      })\r\n    },\r\n  })\r\n\r\n  const handleRoleChange = (event: any) => {\r\n    formik.setFieldValue('role', event.target.value)\r\n  } \r\n\r\n  return (\r\n    <div className='d-flex flex-center flex-column flex-column-fluid p-10 pb-lg-20'>\r\n        {/* begin::Wrapper */}\r\n      <div className='w-lg-500px bg-body rounded shadow-sm p-10 p-lg-15 mx-auto'>\r\n        <form\r\n          className='form w-100'\r\n          onSubmit={formik.handleSubmit}\r\n          noValidate\r\n        >\r\n          {/* begin::Heading */}\r\n          <div className='text-center mb-11'>\r\n            <h1 className='text-dark fw-bolder mb-3'>Invite Users</h1>\r\n          </div>\r\n          {/* begin::Heading */}\r\n\r\n          {successMessage !== \"\" ? (\r\n            <AlertSuccess message={successMessage} checked={checked} />\r\n          ) : null }\r\n\r\n          {errorMessage !== \"\" ? (\r\n            <AlertDanger message={errorMessage} checked={checked} />\r\n          ) : null }\r\n\r\n          <div className='fv-row mb-8'>\r\n            <label className='form-label fs-6 fw-bolder text-dark'>User Email</label>\r\n            <input\r\n              placeholder='Email'\r\n              {...formik.getFieldProps('email')}\r\n              className='form-control bg-transparent'\r\n              type='email'\r\n              name='email'\r\n              autoComplete='off'\r\n            />\r\n            {formik.touched.email && formik.errors.email && (\r\n              <div className='fv-plugins-message-container'>\r\n                <span role='alert'>{formik.errors.email}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* end::Form group */}\r\n\r\n          {/* begin::Form group Street Name */}\r\n          <div className='fv-row mb-8'>\r\n            <label className='form-label fw-bolder text-dark fs-6'>User Role</label>\r\n            <select\r\n              value={formik.getFieldMeta('role').value}\r\n              onChange={(e) => handleRoleChange(e)}\r\n              className='form-select form-select-lg form-select-solid'\r\n              name='roles'\r\n            >\r\n              <option value=\"\">Select a role</option>\r\n              <option value=\"3\">View Only</option>\r\n              <option value=\"2\">User</option>\r\n              <option value=\"1\">Administrator</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Form group */}\r\n\r\n          {/* begin::Action */}\r\n          <div className='d-grid mb-10'>\r\n            <button\r\n              type='submit'\r\n              className='btn btn-primary'\r\n              disabled={formik.isSubmitting || !formik.isValid || loading}\r\n            >\r\n              {!loading && <span className='indicator-label'>Invite User</span>}\r\n              {loading && (\r\n                <span className='indicator-progress' style={{display: 'block'}}>\r\n                  Inviting...\r\n                  <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                </span>\r\n              )}\r\n            </button>\r\n\r\n            <Link to='/manage-users'>\r\n              <button\r\n                type='button'\r\n                id='kt_login_signup_form_cancel_button'\r\n                className='mt-5 btn btn-lg btn-light-primary w-100 mb-5'\r\n              >\r\n                Back\r\n              </button>\r\n            </Link>\r\n          </div>\r\n          {/* end::Action */}\r\n        </form>\r\n      </div>\r\n      {/* end::Wrapper */}\r\n    </div>\r\n  )\r\n}\r\n"],"names":["invitationSchema","Yup","shape","email","min","max","required","role","initialValues","InviteUsers","useState","loading","setLoading","useAuth","currentUser","auth","navigate","useNavigate","checked","setChecked","successMessage","setSuccessMessage","errorMessage","setErrorMessage","useEffect","user","setTimeout","formik","useFormik","validationSchema","onSubmit","values","setStatus","setSubmitting","sendInvitation","id","companyId","then","response","data","success","message","catch","err","className","handleSubmit","noValidate","placeholder","getFieldProps","type","name","autoComplete","touched","errors","value","getFieldMeta","onChange","e","event","setFieldValue","target","disabled","isSubmitting","isValid","style","display","to"],"sourceRoot":""}