{"version":3,"file":"static/js/983.13dfa440.chunk.js","mappings":"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","sources":["app/modules/communities/components/CommunitySearchComponent.tsx","app/modules/communities/components/CommunityToolbar.tsx","app/modules/communities/components/CommunityListHeader.tsx","app/modules/custom/stateMap.ts","app/modules/communities/components/CommunityTableRow.tsx","app/modules/communities/components/DeleteConfirmationBox.tsx","app/modules/communities/api/index.ts","app/modules/communities/components/CommunityTable.tsx","../node_modules/react-intl/lib/src/components/useIntl.js","app/modules/communities/components/CreateCommunity.tsx","app/modules/communities/components/EditCommunity.tsx","app/modules/communities/CommunitiesList.tsx","app/modules/custom/NoOfRecords.tsx","app/modules/custom/Pagination.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useEffect, useState} from 'react'\r\nimport { KTIcon } from '../../../../_metronic/helpers'\r\n\r\nconst CommunitySearchComponent = (props: any) => {\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      <div className='user-manager-header'>\r\n        {/* begin::Search */}\r\n        <div className='d-flex align-items-center position-relative my-1'>\r\n          <KTIcon iconName='magnifier' className='fs-1 position-absolute ms-6' />\r\n          <input\r\n            type='text'\r\n            data-kt-user-table-filter='search'\r\n            className='form-control form-control-solid w-250px ps-14'\r\n            placeholder='Search community'\r\n            // value={props.searchString}\r\n            onChange={(e) => props.handleSearchBarChange(e)}\r\n          />\r\n        </div>\r\n        {/* end::Search */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {CommunitySearchComponent}\r\n","import {KTIcon} from '../../../../_metronic/helpers'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst CommunityToolbar = (props: any) => {\r\n    const navigate = useNavigate()\r\n    return (\r\n        <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n            {/* begin::Add user */}\r\n            <button type='button' className='btn btn-primary' onClick={() => props.setShowCreateCommunityModal(true)}>\r\n                <KTIcon iconName='plus' className='fs-2' />\r\n                Create Community\r\n            </button>\r\n            {/* end::Add user */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {CommunityToolbar}\r\n","import {CommunitySearchComponent} from './CommunitySearchComponent'\r\nimport { CommunityToolbar } from './CommunityToolbar'\r\n\r\nconst CommunityListHeader = (props: any) => {\r\n\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <CommunitySearchComponent \r\n        searchString={props.searchString}\r\n        handleSearchBarChange={props.handleSearchBarChange}\r\n        noOfRecords={props.noOfRecords}\r\n      />\r\n\r\n      <div className='card-toolbar'>\r\n        <CommunityToolbar \r\n          noOfRecords={props.noOfRecords} \r\n          setShowCreateCommunityModal={props.setShowCreateCommunityModal}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {CommunityListHeader}","export const stateMap: any = {\r\n    \"AL\": \"Alabama\",\r\n    \"AK\": \"Alaska\",\r\n    \"AZ\": \"Arizona\",\r\n    \"AR\": \"Arkansas\",\r\n    \"CA\": \"California\",\r\n    \"CO\": \"Colorado\",\r\n    \"CT\": \"Connecticut\",\r\n    \"DE\": \"Delaware\",\r\n    \"DC\": \"District Of Columbia\",\r\n    \"FL\": \"Florida\",\r\n    \"GA\": \"Georgia\",\r\n    \"HI\": \"Hawaii\",\r\n    \"ID\": \"Idaho\",\r\n    \"IL\": \"Illinois\",\r\n    \"IN\": \"Indiana\",\r\n    \"IA\": \"Iowa\",\r\n    \"KS\": \"Kansas\",\r\n    \"KY\": \"Kentucky\",\r\n    \"LA\": \"Louisiana\",\r\n    \"ME\": \"Maine\",\r\n    \"MD\": \"Maryland\",\r\n    \"MA\": \"Massachusetts\",\r\n    \"MI\": \"Michigan\",\r\n    \"MN\": \"Minnesota\",\r\n    \"MS\": \"Mississippi\",\r\n    \"MO\": \"Missouri\",\r\n    \"MT\": \"Montana\",\r\n    \"NE\": \"Nebraska\",\r\n    \"NV\": \"Nevada\",\r\n    \"NH\": \"New Hampshire\",\r\n    \"NJ\": \"New Jersey\",\r\n    \"NM\": \"New Mexico\",\r\n    \"NY\": \"New York\",\r\n    \"NC\": \"North Carolina\",\r\n    \"ND\": \"North Dakota\",\r\n    \"OH\": \"Ohio\",\r\n    \"OK\": \"Oklahoma\",\r\n    \"OR\": \"Oregon\",\r\n    \"PA\": \"Pennsylvania\",\r\n    \"RI\": \"Rhode Island\",\r\n    \"SC\": \"South Carolina\",\r\n    \"SD\": \"South Dakota\",\r\n    \"TN\": \"Tennessee\",\r\n    \"TX\": \"Texas\",\r\n    \"UT\": \"Utah\",\r\n    \"VT\": \"Vermont\",\r\n    \"VA\": \"Virginia\",\r\n    \"WA\": \"Washington\",\r\n    \"WV\": \"West Virginia\",\r\n    \"WI\": \"Wisconsin\",\r\n    \"WY\": \"Wyoming\"\r\n}","import {KTIcon} from '../../../../_metronic/helpers'\r\nimport { stateMap } from '../../custom/stateMap'\r\n\r\nexport const CommunityListTableRow = (props: any) => {\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                {/* <td>\r\n                    <div className=\"ms-3 form-check form-check-sm form-check-custom form-check-solid\">\r\n                        <input \r\n                            id='kt_table_users' \r\n                            className=\"form-check-input\" \r\n                            type=\"checkbox\" \r\n                            checked={props.selected}\r\n                            value={props.id}\r\n                            onChange={(e) => props.handleChange(e)} \r\n                        />\r\n                    </div>\r\n                </td> */}\r\n                <td className=\"text-gray-800 text-start\">{props.communityName}</td>\r\n                <td className=\"text-gray-800 text-start\">{props.communityAlias}</td>\r\n                <td className=\"text-gray-800 text-start\">\r\n                  {props.active && \r\n                      <div className=\"badge badge-light-success fw-bolder\">Active</div>\r\n                  }\r\n                  {!props.active && \r\n                      <div className=\"badge badge-light-danger fw-bolder\">Inactive</div>\r\n                  }\r\n                </td>\r\n                <td className=\"text-gray-800 text-start\">{props.noOfFiles}</td>\r\n                <td className=\"text-gray-800 text-start\">\r\n                    <div className='d-flex flex-shrink-0'>\r\n                        <span className='fs-6'>{props.street},</span>\r\n                        <span className='fs-6 ms-1'>{props.city},</span>\r\n                        <span className='fs-6 ms-1'>{stateMap[props.state]},</span>\r\n                        <span className='fs-6 ms-1'>{props.zip}</span>\r\n                    </div>\r\n                </td>\r\n                {/* <td className=\"text-gray-800 text-center\"><>{new Date(props.created).toLocaleDateString()}</></td>  */}\r\n                <td>\r\n                  <div className='d-flex justify-content-end flex-shrink-0'>\r\n                    <span\r\n                      className='btn btn-icon btn-bg-light btn-active-color-primary btn-sm me-1'\r\n                      onClick={() => props.showUpdateModal(props.id)}\r\n                    >\r\n                      <KTIcon iconName='pencil' className='fs-3' />\r\n                    </span>\r\n                    {props.active ? (\r\n                      <span\r\n                        className='btn btn-icon btn-bg-light btn-active-color-primary btn-sm'\r\n                        onClick={() => props.openDialogForSingleDeletion(`deactivate-community-${props.id}`)}\r\n                      >\r\n                        <KTIcon iconName='trash' className='fs-3' />\r\n                      </span>\r\n                    ): (\r\n                      <span\r\n                        className='btn btn-icon btn-bg-light btn-active-color-primary btn-sm'\r\n                        onClick={() => props.openDialogForSingleDeletion(`activate-community-${props.id}`)}\r\n                      >\r\n                        <KTIcon iconName='plus' className='fs-3' />\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </td>\r\n            </tr>\r\n        </>\r\n    )\r\n}","import { FormattedMessage } from \"react-intl\"\r\n\r\nconst DeleteConfirmationBoxForCommunity = (props: any) => {\r\n    return (\r\n        <div id={`delete-communities`} style={{ display: 'none' }} className=\"modal\">\r\n            <span onClick={() => props.closeDialog(`delete-communities`)} className=\"close\" title=\"Close Modal\">&times;</span>\r\n            <form className=\"modal-content\">\r\n                <div className=\"px-7 py-7\">\r\n                    <h3 className='text-center'>\r\n                        Delete Communities\r\n                    </h3>\r\n\r\n                    <p className='font-size-15 text-center'>\r\n                        Are you sure that you want to delete the selected communities?\r\n                    </p>\r\n\r\n                    <div className=\"d-flex justify-content-center\">\r\n                        <button \r\n                            onClick={() => props.closeDialog('delete-communities')}\r\n                            type=\"button\" \r\n                            className=\"btn btn-primary\"\r\n                        >\r\n                            Cancel\r\n                        </button>\r\n                        <button \r\n                            onClick={() => props.handleBulkDeletion()} \r\n                            type=\"button\" \r\n                            className=\"btn btn-danger ms-3\"\r\n                        >\r\n                            Delete\r\n\r\n                            {props.deleting && \r\n                                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {DeleteConfirmationBoxForCommunity}","import axios from 'axios'\r\n\r\nconst API_URL = process.env.REACT_APP_BACKEND_URL\r\n\r\nexport const CREATE_COMMUNITY = `${API_URL}/create-community`\r\nexport const UPDATE_COMMUNITY = `${API_URL}/update-community`\r\nexport const GET_COMMUNITY_LIST = `${API_URL}/get-communities`\r\nexport const DELETE_COMMUNITY = `${API_URL}/delete-community`\r\nexport const ACTIVATE_COMMUNITY = `${API_URL}/activate-community`\r\nexport const DEACTIVATE_COMMUNITY = `${API_URL}/deactivate-community`\r\nexport const DELETE_COMMUNITIES = `${API_URL}/delete-communities`\r\nexport const CHECK_ALIAS_EXIST = `${API_URL}/check-alias-exist`\r\nexport const CHECK_ALIAS_EXIST_FOR_UPDATE = `${API_URL}/check-alias-exist-for-update`\r\n\r\nexport function createCommunity(\r\n    companyId: any,\r\n    creator: any,\r\n    communityName: string,\r\n    communityAlias: string,\r\n    streetName: string,\r\n    city: string,\r\n    state: string,\r\n    zipcode: string,\r\n    offset: number,\r\n    limit: number\r\n) {\r\n  return axios.post(CREATE_COMMUNITY, {\r\n    companyId,\r\n    creator,\r\n    communityName,\r\n    communityAlias,\r\n    streetName,\r\n    city,\r\n    state,\r\n    zipcode,\r\n    offset,\r\n    limit\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\nexport function getCommunityList(\r\n    searchString: string,\r\n    companyId: any,\r\n    offset: number,\r\n    limit: number\r\n) {\r\n  return axios.post(GET_COMMUNITY_LIST, {\r\n    searchString,\r\n    companyId,\r\n    offset,\r\n    limit\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\nexport function deleteCommunity(\r\n    communityId: any,\r\n    companyId: any,\r\n    limit: number,\r\n    offset: any,\r\n    searchString: string\r\n) {\r\n  return axios.post(DELETE_COMMUNITY, {\r\n    communityId,\r\n    companyId,\r\n    limit,\r\n    offset,\r\n    searchString\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\nexport function activateCommunity(\r\n    communityId: any,\r\n    companyId: any,\r\n    limit: number,\r\n    offset: any,\r\n    searchString: string\r\n) {\r\n  return axios.post(ACTIVATE_COMMUNITY, {\r\n    communityId,\r\n    companyId,\r\n    limit,\r\n    offset,\r\n    searchString\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\nexport function deactivateCommunity(\r\n    communityId: any,\r\n    companyId: any,\r\n    limit: number,\r\n    offset: any,\r\n    searchString: string\r\n) {\r\n  return axios.post(DEACTIVATE_COMMUNITY, {\r\n    communityId,\r\n    companyId,\r\n    limit,\r\n    offset,\r\n    searchString\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\nexport function deleteCommunities(\r\n    communityIds: Array<any>,\r\n    companyId: any,\r\n    limit: number\r\n) {\r\n  return axios.post(DELETE_COMMUNITIES, {\r\n    communityIds,\r\n    companyId,\r\n    limit\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\nexport function updateCommunities(\r\n  communityName: string,\r\n  communityAlias: string,\r\n  streetName: string,\r\n  city: string,\r\n  state: string,\r\n  zipcode: any,\r\n  companyId: any,\r\n  communityId: any,\r\n  offset: any,\r\n  limit: any,\r\n  searchString: string\r\n) {\r\n  return axios.post(UPDATE_COMMUNITY, {\r\n    communityName,\r\n    communityAlias,\r\n    streetName,\r\n    city,\r\n    state,\r\n    zipcode,\r\n    companyId,\r\n    communityId,\r\n    offset,\r\n    limit,\r\n    searchString\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\nexport function checkIfAliasExist(\r\n  alias: any\r\n) {\r\n  return axios.post(CHECK_ALIAS_EXIST, {\r\n    alias\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\nexport function checkIfAliasExistForUpdate(\r\n  alias: any,\r\n  communityId: any\r\n) {\r\n  return axios.post(CHECK_ALIAS_EXIST_FOR_UPDATE, {\r\n    alias,\r\n    communityId\r\n  }, {\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n\r\n","import {useState, useEffect} from 'react'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { AlertDanger } from '../../alerts/Alerts'\r\nimport { CommunityListTableRow } from './CommunityTableRow'\r\nimport { DeleteConfirmationBoxForCommunity } from './DeleteConfirmationBox'\r\nimport { useAuth } from '../../auth'\r\nimport { deleteCommunities, deleteCommunity, activateCommunity, deactivateCommunity } from '../api'\r\nimport { NoOfRecords } from '../../custom/NoOfRecords'\r\nimport { Pagination } from '../../custom/Pagination'\r\n\r\nconst roleToIdMap: any = {\r\n    '1' : 'Administrator',\r\n    '2' : 'User',\r\n    '3' : 'View Only'\r\n}\r\n\r\nconst CommunityListTable = (props: any) => {\r\n    const { currentUser, setCommunityList, setCurrentCommunity, currentCommunity } = useAuth()\r\n\r\n    useEffect(() => {\r\n        if(props.invitationList) {\r\n            if(props.deleteRecord.length !== props.invitationList.length) {\r\n                props.setSelectedAll(false)\r\n            }\r\n            if(props.deleteRecord.length === props.invitationList.length && props.invitationList.length > 0) {\r\n                props.setSelectedAll(true)\r\n            }\r\n        }\r\n    }, [props.deleteRecord])\r\n\r\n    const handleChangeSelected = async (id: string) => {\r\n        let newCommunityList: Array<any> = []\r\n        props.communityList.map((community: any) => {\r\n            if(community.id != id) {\r\n                newCommunityList = [...newCommunityList, community]\r\n            } else {\r\n                const newCommunity = community\r\n                const selected = !newCommunity.selected\r\n                newCommunity.selected = selected\r\n                newCommunityList.push(newCommunity)\r\n            }\r\n        })\r\n        props.setCommunityList(newCommunityList)\r\n    }\r\n\r\n    const handleChange = async (e: any) => {\r\n        await handleChangeSelected(e.target.value)\r\n        if(e.target.checked) {\r\n            props.setDeleteRecord((record: any) => {\r\n                return [\r\n                    ...record,\r\n                    e.target.value\r\n                ]\r\n            })\r\n        } else {\r\n            props.setDeleteRecord((record: any) => {\r\n                const newRecord = record.filter((rec: any) => {\r\n                    return rec !== e.target.value\r\n                })\r\n                return newRecord\r\n            })\r\n        }\r\n    }\r\n\r\n    const openDialog = (id: string) => {\r\n        const element: HTMLElement = document.getElementById(id)!\r\n        element.style.display='block'\r\n    }\r\n\r\n    const closeDialog = (id: string) => {\r\n        const element: HTMLElement = document.getElementById(id)!\r\n        element.style.display='none'\r\n    }\r\n\r\n    const handleSelectAll = (event: any) => {\r\n        if(event.target.checked) {\r\n            props.setSelectedAll(true)\r\n            const newCommunityList: Array<any> = []\r\n            const newDeleteRecord: Array<string> = []\r\n            props.communityList.map((community: any) => {\r\n                newCommunityList.push(props.handleChangeSelection(community.id, true))\r\n                newDeleteRecord.push(community.id)\r\n            })\r\n            props.setCommunityList(newCommunityList)\r\n            props.setDeleteRecord(newDeleteRecord)\r\n        } else {\r\n            props.setSelectedAll(false)\r\n            const newCommunityList: Array<any> = []\r\n            props.communityList.map((community: any) => {\r\n                newCommunityList.push(props.handleChangeSelection(community.id, false))\r\n            })\r\n            props.setCommunityList(newCommunityList)\r\n            props.setDeleteRecord([])\r\n        }\r\n    }\r\n\r\n    const openDialogForSingleDeletion = (id: string) => {\r\n        const element: HTMLElement = document.getElementById(id)!\r\n        element.style.display='block'\r\n    }\r\n    \r\n    const closeDialogForSingleDeletion = (id: string) => {\r\n        const element: HTMLElement = document.getElementById(id)!\r\n        element.style.display='none'\r\n    }\r\n\r\n    const handleBulkDeletion = () => {\r\n        props.setDeleting(true)\r\n        deleteCommunities(props.deleteRecord, currentUser?.companyId, props.limit)\r\n        .then((response: any) => {\r\n            if(response.data.success) {\r\n                localStorage.setItem('responsesuccessmsg', response.data.message)\r\n                window.location.reload();\r\n            } else {\r\n                if(response.data.message) {\r\n                    localStorage.setItem('responsefailuresmsg', response.data.message)\r\n                    window.location.reload();\r\n                } else {\r\n                    localStorage.setItem('responsefailuresmsg', 'Failed to delete users')\r\n                    window.location.reload();\r\n                }\r\n            }\r\n        })\r\n        .then(() => {\r\n            props.setDeleteRecord([])\r\n            closeDialog('delete-communities')\r\n            props.setDeleting(false)\r\n            if(props.selectedAll) {\r\n                props.setSelectedAll(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleSingleDeletion = (communityId: any) => {\r\n        props.setDeleting(true)\r\n        deleteCommunity(\r\n            communityId, \r\n            currentUser?.companyId, \r\n            props.limit,\r\n            0,\r\n            props.searchString\r\n        )\r\n        .then((response: any) => {\r\n            if(response.data.success) {\r\n                    props.setCommunityList(response.data.communityList)\r\n                    props.setTotNumOfPage(response.data.totalPageNum)\r\n                    props.setNoOfRecords(response.data.noOfRecords)\r\n                    props.setSelectedPage(1)\r\n                    props.setCurrentPage(1)\r\n                    props.setSuccessResMessage(response.data.message)\r\n                    props.setChecked(true)\r\n            } else {\r\n                if(response.data.message) {\r\n                    props.setFailureResMessage(response.data.message)\r\n                    props.setChecked(true)\r\n                }\r\n            }\r\n        })\r\n        .then(() => {\r\n            closeDialogForSingleDeletion(`delete-community-${communityId}`)\r\n            props.setDeleting(false)\r\n        })\r\n    }\r\n\r\n    const handleActivate = (communityId: any) => {\r\n        props.setDeleting(true)\r\n        activateCommunity(\r\n            communityId, \r\n            currentUser?.companyId, \r\n            props.limit,\r\n            0,\r\n            props.searchString\r\n        )\r\n        .then((response: any) => {\r\n            if(response.data.success) {\r\n                    props.setCommunityList(response.data.communityList)\r\n                    props.setTotNumOfPage(response.data.totalPageNum)\r\n                    props.setNoOfRecords(response.data.noOfRecords)\r\n                    setCommunityList(response.data.activeCommunities)\r\n                    props.setSelectedPage(1)\r\n                    props.setCurrentPage(1)\r\n                    props.setSuccessResMessage(response.data.message)\r\n                    props.setChecked(true)\r\n            } else {\r\n                if(response.data.message) {\r\n                    props.setFailureResMessage(response.data.message)\r\n                    props.setChecked(true)\r\n                }\r\n            }\r\n        })\r\n        .then(() => {\r\n            closeDialogForSingleDeletion(`activate-community-${communityId}`)\r\n            props.setDeleting(false)\r\n        })\r\n    }\r\n\r\n    const handleDeactivate = (communityId: any) => {\r\n        props.setDeleting(true)\r\n        deactivateCommunity(\r\n            communityId, \r\n            currentUser?.companyId, \r\n            props.limit,\r\n            0,\r\n            props.searchString\r\n        )\r\n        .then((response: any) => {\r\n            if(response.data.success) {\r\n                    if(currentCommunity == communityId) {\r\n                        setCurrentCommunity(response.data.activeCommunities[0][\"id\"])\r\n                    }\r\n                    props.setCommunityList(response.data.communityList)\r\n                    props.setTotNumOfPage(response.data.totalPageNum)\r\n                    props.setNoOfRecords(response.data.noOfRecords)\r\n                    setCommunityList(response.data.activeCommunities)\r\n                    props.setSelectedPage(1)\r\n                    props.setCurrentPage(1)\r\n                    props.setSuccessResMessage(response.data.message)\r\n                    props.setChecked(true)\r\n            } else {\r\n                if(response.data.message) {\r\n                    props.setFailureResMessage(response.data.message)\r\n                    props.setChecked(true)\r\n                }\r\n            }\r\n        })\r\n        .then(() => {\r\n            closeDialogForSingleDeletion(`deactivate-community-${communityId}`)\r\n            props.setDeleting(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div id=\"community-table\" className=\"card\" style={{ overflowX: 'auto'}}>\r\n                {props.warnings != \"\" && \r\n                    <AlertDanger message={props.warnings} checked={props.showWarnings} />\r\n                }\r\n                {props.deleteRecord.length > 0 &&\r\n                    <div className=\"card-header border-0 pt-6\">\r\n                        <div className=\"card-toolbar\">\r\n                            <div className=\"d-flex justify-content-end\">\r\n                                {props.deleteRecord.length > 0 && \r\n                                    <div className=\"d-flex justify-content-end align-items-center\">\r\n                                        <div className=\"fw-bolder me-5\">\r\n                                            <span className=\"me-2\">{props.deleteRecord.length}</span>Selected</div>\r\n                                        <button type=\"button\" onClick={() => openDialog('delete-communities')} className=\"btn btn-danger\">\r\n                                            Delete Selected\r\n                                        </button>\r\n                                    </div>\r\n                                }\r\n                                <DeleteConfirmationBoxForCommunity\r\n                                    closeDialog={closeDialog}\r\n                                    deleting={props.deleting}\r\n                                    handleBulkDeletion={handleBulkDeletion}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n                <div className=\"card-body\">\r\n                    <table className=\"table mb-10 align-middle table-row-dashed fs-6 gy-5 px-3\" id=\"kt_table_users\">\r\n                        <thead className=\"pe-5\">\r\n                            <tr className=\"text-start text-muted fw-bolder fs-7 text-uppercase gs-0\">\r\n                                {/* <th className=\"w-10px pe-2\">\r\n                                    <div className=\"ms-3 form-check form-check-sm form-check-custom form-check-solid me-3\">\r\n                                        <input className=\"form-check-input\" onChange={(e) => handleSelectAll(e)} type=\"checkbox\" checked={props.selectedAll} />\r\n                                    </div>\r\n                                </th> */}\r\n                                \r\n                                <th className=\"min-w-50px\">\r\n                                    Community Name\r\n                                </th>\r\n                                <th className=\"min-w-50px\">\r\n                                    Community Id\r\n                                </th>\r\n                                <th className=\"min-w-50px\">\r\n                                    Status\r\n                                </th>\r\n                                <th className=\"text-start min-w-50px\">\r\n                                    # Of Files\r\n                                </th>\r\n                                <th className=\"text-start min-w-350px\">\r\n                                    Address\r\n                                </th>\r\n                                <th className='min-w-100px text-end'>Actions</th>\r\n                            </tr>\r\n                        </thead>\r\n                        {/* {!props.loading &&  */}\r\n                            <tbody className=\"text-gray-600 fw-bold\">\r\n                                <>\r\n                                    {props.communityList.map((data: any) => (\r\n                                        <>\r\n                                            <CommunityListTableRow\r\n                                                id={data.id}\r\n                                                communityName={data.community_name}\r\n                                                communityAlias={data.community_alias}\r\n                                                active={data.active == 1 ? true : false}\r\n                                                street={data.street}\r\n                                                noOfFiles={data.noOfFiles}\r\n                                                city={data.city}\r\n                                                state={data.state}\r\n                                                zip={data.zipcode}\r\n                                                created={data.created}\r\n                                                setShowCommunityUpdateModal={props.setShowCommunityUpdateModal}\r\n                                                openDialogForSingleDeletion={openDialogForSingleDeletion}\r\n                                                handleChange={handleChange}\r\n                                                showUpdateModal={props.showUpdateModal}\r\n                                            />\r\n\r\n                                            <div id={`activate-community-${data.id}`} style={{ display: 'none' }} className=\"modal\">\r\n                                                <span onClick={() => closeDialogForSingleDeletion(`activate-community-${data.id}`)} className=\"close\" title=\"Close Modal\">&times;</span>\r\n                                                <form className=\"modal-content bg-white\">\r\n                                                    <div className=\"px-7 py-7\">\r\n                                                        <h3>\r\n                                                            Activate Community\r\n                                                        </h3>\r\n                                                        <p className='font-size-15'>\r\n                                                            Are you sure that you want to activate the selected community?\r\n                                                        </p>\r\n                        \r\n                                                        <div className=\"d-flex\">\r\n                                                            <button onClick={() => closeDialogForSingleDeletion(`activate-community-${data.id}`)} type=\"button\" className=\"btn btn-primary\">\r\n                                                                Cancel\r\n                                                            </button>\r\n                                                            <button \r\n                                                                onClick={() => handleActivate(data.id)} \r\n                                                                type=\"button\" \r\n                                                                className=\"btn btn-danger ms-3\"\r\n                                                            >\r\n                                                                Activate\r\n                                                                {props.deleting && <span className='spinner-border spinner-border-sm align-middle ms-2'></span>}\r\n                                                            </button>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </form>\r\n                                            </div>\r\n                                            <div id={`deactivate-community-${data.id}`} style={{ display: 'none' }} className=\"modal\">\r\n                                                <span onClick={() => closeDialogForSingleDeletion(`deactivate-community-${data.id}`)} className=\"close\" title=\"Close Modal\">&times;</span>\r\n                                                <form className=\"modal-content bg-white\">\r\n                                                    <div className=\"px-7 py-7\">\r\n                                                        <h3>\r\n                                                            Deactivate Community\r\n                                                        </h3>\r\n                                                        <p className='font-size-15'>\r\n                                                            Are you sure that you want to deactivate the selected community?\r\n                                                        </p>\r\n                        \r\n                                                        <div className=\"d-flex\">\r\n                                                            <button onClick={() => closeDialogForSingleDeletion(`deactivate-community-${data.id}`)} type=\"button\" className=\"btn btn-primary\">\r\n                                                                Cancel\r\n                                                            </button>\r\n                                                            <button \r\n                                                                onClick={() => handleDeactivate(data.id)} \r\n                                                                type=\"button\" \r\n                                                                className=\"btn btn-danger ms-3\"\r\n                                                            >\r\n                                                                Deactivate\r\n                                                                {props.deleting && <span className='spinner-border spinner-border-sm align-middle ms-2'></span>}\r\n                                                            </button>\r\n                                                        </div>\r\n                                                        <p className='font-size-15 mt-4'>\r\n                                                            Note: The users shall not be able to access the information of this community\r\n                                                        </p>\r\n                                                    </div>\r\n                                                </form>\r\n                                            </div>\r\n                                        </>\r\n                                    ))}\r\n                                </>\r\n                            </tbody>\r\n                        {/* } */}\r\n                    </table>\r\n                </div>\r\n            </div>\r\n            {!props.loading && props.noOfRecords > 0 &&\r\n                <div className='px-15 user-pagination mt-5 mb-5'>\r\n                    <NoOfRecords \r\n                        totalNoOfRecords={props.noOfRecords}\r\n                        selectedPage={props.selectedPage}\r\n                        limit={props.limit}\r\n                        entityName='communities'\r\n                    />\r\n\r\n                    {props.totNumOfPage > 1 && \r\n                        <Pagination \r\n                            totalNumberOfPages={props.totNumOfPage}\r\n                            fetchNextData={props.fetchNextData}\r\n                            selectedPage={props.selectedPage}\r\n                            setSelectedPage={props.setSelectedPage}\r\n                            currentPage={props.currentPage}\r\n                            setCurrentPage={props.setCurrentPage}\r\n                        />\r\n                    }\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport {CommunityListTable}","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {useRef, useState} from 'react'\r\nimport {createPortal} from 'react-dom'\r\nimport {Modal} from 'react-bootstrap'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\nimport { KTIcon } from '../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport { useAuth } from '../../auth'\r\nimport { createCommunity, checkIfAliasExist } from '../api'\r\n\r\ntype Props = {\r\n  show: boolean\r\n  handleClose: () => void\r\n  offset: number\r\n  limit: number\r\n  setSuccessResMessage: any\r\n  setFailureResMessage: any\r\n  setChecked: any\r\n  _setCommunityList: any\r\n  setSelectedPage: any\r\n  setCurrentPage: any\r\n  setTotNumOfPage: any\r\n  setNoOfRecords: any\r\n}\r\n\r\nconst communityCreationSchema = Yup.object().shape({\r\n  communityName: Yup.string()\r\n    .min(3, 'Minimum 3 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('Community Name is required'),\r\n  communityAlias: Yup.string()\r\n    .min(3, 'Minimum 3 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('Community Alias is required'),\r\n  streetName: Yup.string()\r\n    .min(3, 'Minimum 3 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('Street name/number is required'),\r\n  city: Yup.string()\r\n    .min(3, 'Minimum 3 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('City is required'),\r\n  state: Yup.string()\r\n    .min(2, 'Minimum 2 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('State is required'),\r\n  zipcode: Yup.string()\r\n    .min(5, 'Minimum 5 numbers')\r\n    .max(5, 'Maximum 5 numbers')\r\n    .required('Zip code is required')\r\n})\r\n\r\ninterface CommunityCreateModel {\r\n  communityName: string,\r\n  communityAlias: string,\r\n  streetName: string,\r\n  city: string,\r\n  state: string,\r\n  zipcode: string\r\n}\r\n\r\nconst modalsRoot = document.getElementById('root-modals') || document.body\r\n\r\nconst CreateCommunity = ({\r\n  show, \r\n  handleClose, \r\n  offset, \r\n  limit,\r\n  setSuccessResMessage,\r\n  setFailureResMessage,\r\n  setChecked,\r\n  _setCommunityList,\r\n  setSelectedPage,\r\n  setCurrentPage,\r\n  setTotNumOfPage,\r\n  setNoOfRecords\r\n}: Props) => {\r\n  const [loading, setLoading] = useState<boolean>(false)\r\n  const [isDuplicateAlias, setIsDuplicateAlias] = useState(false)\r\n  const intl = useIntl()\r\n  const {currentUser, setCommunityList} = useAuth()\r\n\r\n\r\n  const initialValues: CommunityCreateModel = {\r\n    communityName: '',\r\n    communityAlias: '',\r\n    streetName: '',\r\n    city: '',\r\n    state: '',\r\n    zipcode: ''\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: communityCreationSchema,\r\n    onSubmit: async (values, {setStatus, setSubmitting}) => {\r\n      setLoading(true)\r\n      checkIfAliasExist(values.communityAlias)\r\n      .then((response) => {\r\n        if(!response.data.exist) {\r\n          createCommunity(\r\n            currentUser?.companyId,\r\n            currentUser?.id,\r\n            values.communityName,\r\n            values.communityAlias,\r\n            values.streetName,\r\n            values.city,\r\n            values.state,\r\n            values.zipcode,\r\n            offset,\r\n            limit\r\n          )\r\n          .then((response) => {\r\n            if(response.data.success) {\r\n              setSuccessResMessage(response.data.message)\r\n              _setCommunityList(response.data.communityList)\r\n              setCommunityList(response.data.activeCommunities)\r\n              setTotNumOfPage(response.data.totalPageNum)\r\n              setNoOfRecords(response.data.noOfRecords)\r\n              setSelectedPage(1)\r\n              setCurrentPage(1)\r\n              setChecked(true)\r\n              setLoading(false)\r\n              setIsDuplicateAlias(false)\r\n            } else {\r\n              setFailureResMessage(response.data.message)\r\n              setChecked(true)\r\n              setLoading(false)\r\n              setIsDuplicateAlias(false)\r\n            }\r\n          })\r\n          .then(() => {\r\n            formik.resetForm()\r\n            handleClose()\r\n          })\r\n          .catch((err) => {\r\n            setFailureResMessage('Failed to create a community')\r\n            setChecked(true)\r\n            setLoading(false)\r\n            setIsDuplicateAlias(false)\r\n          })\r\n        } else {\r\n          setIsDuplicateAlias(true)\r\n          setLoading(false)\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        //\r\n      })\r\n    },\r\n  })\r\n\r\n  const handleStateNameChange = (event: any) => {\r\n    formik.setFieldValue('state', event.target.value)\r\n  }\r\n\r\n  return createPortal(\r\n    <Modal\r\n      id='create_community_modal'\r\n      tabIndex={-1}\r\n      aria-hidden='true'\r\n      dialogClassName='modal-dialog modal-dialog-centered mw-900px'\r\n      show={show}\r\n      onHide={handleClose}\r\n      backdrop={true}\r\n    >\r\n      <div className='modal-header'>\r\n        <h2>\r\n            Create Community\r\n        </h2>\r\n        {/* begin::Close */}\r\n        <div className='btn btn-sm btn-icon btn-active-color-primary' onClick={handleClose}>\r\n          <KTIcon className='fs-1' iconName='cross' />\r\n        </div>\r\n        {/* end::Close */}\r\n      </div>\r\n\r\n      <div className='modal-body py-lg-10 px-lg-10'>\r\n        <form\r\n            className='form w-100 fv-plugins-bootstrap5 fv-plugins-framework'\r\n            noValidate\r\n            id='kt_login_signup_form'\r\n            onSubmit={formik.handleSubmit}\r\n        >\r\n      \r\n          {/* begin::Form group First Name */}\r\n          <div className='fv-row mb-8'>\r\n              <label className='form-label fw-bolder text-dark fs-4 required'>Community Name</label>\r\n              <input\r\n                  placeholder='Community Name'\r\n                  type='text'\r\n                  autoComplete='off'\r\n                  {...formik.getFieldProps('communityName')}\r\n                  className={'form-control bg-transparent'}\r\n              />\r\n              {formik.touched.communityName && formik.errors.communityName && (\r\n                <div className='fv-plugins-message-container'>\r\n                    <div className='fv-help-block'>\r\n                    <span role='alert'>{formik.errors.communityName}</span>\r\n                    </div>\r\n                </div>\r\n              )}\r\n          </div>\r\n          {/* end::Form group */}\r\n\r\n          {/* begin::Form group First Name */}\r\n          <div className='fv-row mb-8'>\r\n              <label className='form-label fw-bolder text-dark fs-4 required'>Community Alias</label>\r\n              <input\r\n                  placeholder='Community Alias'\r\n                  type='text'\r\n                  autoComplete='off'\r\n                  {...formik.getFieldProps('communityAlias')}\r\n                  className={'form-control bg-transparent'}\r\n                  onChange={(event: any) => {\r\n                    formik.setFieldValue('communityAlias', event.target.value)\r\n                    if(isDuplicateAlias) setIsDuplicateAlias(false)\r\n                  }}\r\n              />\r\n              {formik.touched.communityAlias && formik.errors.communityAlias && (\r\n                <div className='fv-plugins-message-container'>\r\n                    <div className='fv-help-block'>\r\n                    <span role='alert'>{formik.errors.communityAlias}</span>\r\n                    </div>\r\n                </div>\r\n              )}\r\n              {isDuplicateAlias && \r\n                <div className='fv-plugins-message-container'>\r\n                  <div className='fv-help-block'>\r\n                    <span role='alert'>This community alias is taken, please try with another alias</span>\r\n                  </div>\r\n                </div>\r\n              }\r\n          </div>\r\n          {/* end::Form group */}\r\n\r\n          <label\r\n              className='btn btn-outline btn-outline-dashed btn-outline-default p-7 d-flex align-items-center mb-10'\r\n              htmlFor='kt_create_account_form_account_type_personal'\r\n          >\r\n              <span className='w-100 fw-bold text-start'>\r\n                <span className='text-dark fw-bolder d-block fs-4 mb-5'>Address</span>\r\n\r\n                 {/* begin::Form group Street Name */}\r\n                 <div className='fv-row mb-8'>\r\n                    <label className='form-label fw-bolder text-dark fs-4'>Street Name</label>\r\n                    <input\r\n                        placeholder='Street name'\r\n                        type='text'\r\n                        autoComplete='off'\r\n                        {...formik.getFieldProps('streetName')}\r\n                        className={'form-control bg-transparent'}\r\n                    />\r\n                    {formik.touched.streetName && formik.errors.streetName && (\r\n                      <div className='fv-plugins-message-container'>\r\n                          <div className='fv-help-block'>\r\n                          <span role='alert'>{formik.errors.streetName}</span>\r\n                          </div>\r\n                      </div>\r\n                    )}\r\n                </div>\r\n                {/* end::Form group */}\r\n                {/* begin::Form group Street Name */}\r\n                <div className='fv-row mb-8'>\r\n                    <label className='form-label fw-bolder text-dark fs-4'>City</label>\r\n                    <input\r\n                        placeholder='City name'\r\n                        type='text'\r\n                        autoComplete='off'\r\n                        {...formik.getFieldProps('city')}\r\n                        className={'form-control bg-transparent'}\r\n                    />\r\n                    {formik.touched.city && formik.errors.city && (\r\n                      <div className='fv-plugins-message-container'>\r\n                          <div className='fv-help-block'>\r\n                          <span role='alert'>{formik.errors.city}</span>\r\n                          </div>\r\n                      </div>\r\n                    )}\r\n                </div>\r\n                {/* end::Form group */}\r\n                {/* begin::Form group Street Name */}\r\n                <div className='fv-row mb-8'>\r\n                    <label className='form-label fw-bolder text-dark fs-4'>State</label>\r\n                    <select\r\n                      value={formik.getFieldMeta('state').value}\r\n                      className='form-select form-select-lg form-select-solid'\r\n                      name='states'\r\n                      onChange={(e) => handleStateNameChange(e)}\r\n                    >\r\n                      <option value=\"\">Select a State</option>\r\n                      <option value=\"AL\">Alabama</option>\r\n                      <option value=\"AK\">Alaska</option>\r\n                      <option value=\"AZ\">Arizona</option>\r\n                      <option value=\"AR\">Arkansas</option>\r\n                      <option value=\"CA\">California</option>\r\n                      <option value=\"CO\">Colorado</option>\r\n                      <option value=\"CT\">Connecticut</option>\r\n                      <option value=\"DE\">Delaware</option>\r\n                      <option value=\"DC\">District Of Columbia</option>\r\n                      <option value=\"FL\">Florida</option>\r\n                      <option value=\"GA\">Georgia</option>\r\n                      <option value=\"HI\">Hawaii</option>\r\n                      <option value=\"ID\">Idaho</option>\r\n                      <option value=\"IL\">Illinois</option>\r\n                      <option value=\"IN\">Indiana</option>\r\n                      <option value=\"IA\">Iowa</option>\r\n                      <option value=\"KS\">Kansas</option>\r\n                      <option value=\"KY\">Kentucky</option>\r\n                      <option value=\"LA\">Louisiana</option>\r\n                      <option value=\"ME\">Maine</option>\r\n                      <option value=\"MD\">Maryland</option>\r\n                      <option value=\"MA\">Massachusetts</option>\r\n                      <option value=\"MI\">Michigan</option>\r\n                      <option value=\"MN\">Minnesota</option>\r\n                      <option value=\"MS\">Mississippi</option>\r\n                      <option value=\"MO\">Missouri</option>\r\n                      <option value=\"MT\">Montana</option>\r\n                      <option value=\"NE\">Nebraska</option>\r\n                      <option value=\"NV\">Nevada</option>\r\n                      <option value=\"NH\">New Hampshire</option>\r\n                      <option value=\"NJ\">New Jersey</option>\r\n                      <option value=\"NM\">New Mexico</option>\r\n                      <option value=\"NY\">New York</option>\r\n                      <option value=\"NC\">North Carolina</option>\r\n                      <option value=\"ND\">North Dakota</option>\r\n                      <option value=\"OH\">Ohio</option>\r\n                      <option value=\"OK\">Oklahoma</option>\r\n                      <option value=\"OR\">Oregon</option>\r\n                      <option value=\"PA\">Pennsylvania</option>\r\n                      <option value=\"RI\">Rhode Island</option>\r\n                      <option value=\"SC\">South Carolina</option>\r\n                      <option value=\"SD\">South Dakota</option>\r\n                      <option value=\"TN\">Tennessee</option>\r\n                      <option value=\"TX\">Texas</option>\r\n                      <option value=\"UT\">Utah</option>\r\n                      <option value=\"VT\">Vermont</option>\r\n                      <option value=\"VA\">Virginia</option>\r\n                      <option value=\"WA\">Washington</option>\r\n                      <option value=\"WV\">West Virginia</option>\r\n                      <option value=\"WI\">Wisconsin</option>\r\n                      <option value=\"WY\">Wyoming</option>\r\n                    </select>\r\n                </div>\r\n                {/* end::Form group */}\r\n                {/* begin::Form group Street Name */}\r\n                <div className='fv-row mb-8'>\r\n                    <label className='form-label fw-bolder text-dark fs-4'>Zipcode</label>\r\n                    <input\r\n                        placeholder='Zipcode'\r\n                        type='text'\r\n                        autoComplete='off'\r\n                        {...formik.getFieldProps('zipcode')}\r\n                        className={'form-control bg-transparent'}\r\n                    />\r\n                    {formik.touched.zipcode && formik.errors.zipcode && (\r\n                      <div className='fv-plugins-message-container'>\r\n                          <div className='fv-help-block'>\r\n                          <span role='alert'>{formik.errors.zipcode}</span>\r\n                          </div>\r\n                      </div>\r\n                    )}\r\n                </div>\r\n                {/* end::Form group */}\r\n              </span>\r\n          </label>\r\n\r\n          {/* begin::Form group */}\r\n          <div className='text-center'>\r\n              <button\r\n                  type='submit'\r\n                  id='kt_sign_up_submit'\r\n                  className='btn btn-lg btn-primary w-50 mb-5'\r\n                  disabled={formik.isSubmitting || !formik.isValid || loading}\r\n              >\r\n                  {!loading && <span className='indicator-label'>Submit</span>}\r\n                  {loading && (\r\n                      <span className='indicator-progress' style={{display: 'block'}}>\r\n                        Please wait...{' '}\r\n                        <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                      </span>\r\n                  )}\r\n              </button>\r\n          </div>\r\n          {/* end::Form group */}\r\n        </form>\r\n      </div>\r\n    </Modal>,\r\n    modalsRoot\r\n  )\r\n}\r\n\r\nexport {CreateCommunity}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\n/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {useEffect, useRef, useState} from 'react'\r\nimport {createPortal} from 'react-dom'\r\nimport {Modal} from 'react-bootstrap'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\nimport { KTIcon } from '../../../../_metronic/helpers'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport { updateCommunities, checkIfAliasExistForUpdate } from '../api'\r\nimport { useAuth } from '../../auth'\r\n\r\ntype Props = {\r\n  show: boolean\r\n  handleClose: () => void\r\n  currentCommDataToEdit: any\r\n  comIdToEdit: any\r\n  offset: number\r\n  limit: number\r\n  setSuccessResMessage: any\r\n  setFailureResMessage: any\r\n  setChecked: any\r\n  _setCommunityList: any\r\n  selectedPage: any\r\n  searchString: string\r\n}\r\n\r\nconst communityUpdateSchema = Yup.object().shape({\r\n  communityName: Yup.string()\r\n    .min(3, 'Minimum 3 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('Community Name is required'),\r\n  communityAlias: Yup.string()\r\n    .min(3, 'Minimum 3 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('Community Alias is required'),\r\n  streetName: Yup.string()\r\n    .min(3, 'Minimum 3 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('Street name/number is required'),\r\n  city: Yup.string()\r\n    .min(3, 'Minimum 3 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('City is required'),\r\n  state: Yup.string()\r\n    .min(2, 'Minimum 2 characters')\r\n    .max(50, 'Maximum 50 characters')\r\n    .required('State is required'),\r\n  zipcode: Yup.string()\r\n    .min(5, 'Minimum 5 numbers')\r\n    .max(5, 'Maximum 5 numbers')\r\n    .required('Zip code is required')\r\n})\r\n\r\ninterface CommunityCreateModel {\r\n  communityName: string,\r\n  communityAlias: string,\r\n  streetName: string,\r\n  city: string,\r\n  state: string,\r\n  zipcode: string\r\n}\r\n\r\nconst modalsRoot = document.getElementById('root-modals') || document.body\r\n\r\nconst EditCommunity = ({\r\n  show, \r\n  handleClose, \r\n  currentCommDataToEdit,\r\n  comIdToEdit,\r\n  offset,\r\n  limit,\r\n  setSuccessResMessage,\r\n  setFailureResMessage,\r\n  setChecked,\r\n  _setCommunityList,\r\n  selectedPage,\r\n  searchString\r\n}: Props) => {\r\n  const intl = useIntl()\r\n  const {currentUser, currentCommunity, setCommunityList, setCurrentCommunity} = useAuth()\r\n  const [loading, setLoading] = useState<boolean>(false)\r\n  const [isDuplicateAlias, setIsDuplicateAlias] = useState(false)\r\n\r\n  let initialValues: CommunityCreateModel = {\r\n    communityName: currentCommDataToEdit.community_name,\r\n    communityAlias: currentCommDataToEdit.community_alias,\r\n    streetName: currentCommDataToEdit.street,\r\n    city: currentCommDataToEdit.city,\r\n    state: currentCommDataToEdit.state,\r\n    zipcode: currentCommDataToEdit.zipcode\r\n  }\r\n\r\n  const formik = useFormik({\r\n    initialValues,\r\n    validationSchema: communityUpdateSchema,\r\n    onSubmit: async (values, {setStatus, setSubmitting}) => {\r\n      setLoading(true)\r\n      checkIfAliasExistForUpdate(values.communityAlias, comIdToEdit)\r\n      .then((response) => {\r\n        if(!response.data.exist) {\r\n          updateCommunities(\r\n            values.communityName,\r\n            values.communityAlias,\r\n            values.streetName,\r\n            values.city,\r\n            values.state,\r\n            values.zipcode,\r\n            currentUser?.companyId,\r\n            comIdToEdit,\r\n            (selectedPage - 1) * limit,\r\n            limit,\r\n            searchString\r\n          )\r\n          .then((response) => {\r\n            if(response.data.success) {\r\n              setSuccessResMessage(response.data.message)\r\n              if(currentCommunity == comIdToEdit) {\r\n                setCurrentCommunity(response.data.activeCommunities[0][\"id\"])\r\n              }\r\n              _setCommunityList(response.data.communityList)\r\n              setCommunityList(response.data.activeCommunities)\r\n              setChecked(true)\r\n              setLoading(false)\r\n            } else {\r\n              setFailureResMessage(response.data.message)\r\n              setChecked(true)\r\n              setLoading(false)\r\n            }\r\n          })\r\n          .then(() => {\r\n            handleClose()\r\n          })\r\n          .catch((err) => {\r\n            setFailureResMessage('Failed to create a community')\r\n            setChecked(true)\r\n            setLoading(false)\r\n          })\r\n        } else {\r\n          setIsDuplicateAlias(true)\r\n        }\r\n      })\r\n      .catch((err) => {\r\n\r\n      })\r\n    },\r\n  })\r\n\r\n  useEffect(() => {\r\n    if(currentCommDataToEdit) {\r\n      formik.setFieldValue('communityName', currentCommDataToEdit.community_name)\r\n      formik.setFieldValue('communityAlias', currentCommDataToEdit.community_alias)\r\n      formik.setFieldValue('streetName', currentCommDataToEdit.street)\r\n      formik.setFieldValue('city', currentCommDataToEdit.city)\r\n      formik.setFieldValue('state', currentCommDataToEdit.state)\r\n      formik.setFieldValue('zipcode', currentCommDataToEdit.zipcode)\r\n    }\r\n  }, [currentCommDataToEdit])\r\n\r\n  const handleStateNameChange = (event: any) => {\r\n    formik.setFieldValue('state', event.target.value)\r\n  }\r\n\r\n  return createPortal(\r\n    <Modal\r\n      id='edit_community_modal'\r\n      tabIndex={-1}\r\n      aria-hidden='true'\r\n      dialogClassName='modal-dialog modal-dialog-centered mw-900px'\r\n      show={show}\r\n      onHide={handleClose}\r\n      backdrop={true}\r\n    >\r\n      <div className='modal-header'>\r\n        <h2>\r\n            Edit Community\r\n        </h2>\r\n        {/* begin::Close */}\r\n        <div className='btn btn-sm btn-icon btn-active-color-primary' onClick={handleClose}>\r\n          <KTIcon className='fs-1' iconName='cross' />\r\n        </div>\r\n        {/* end::Close */}\r\n      </div>\r\n\r\n      <div className='modal-body py-lg-10 px-lg-10'>\r\n        <form\r\n          className='form w-100 fv-plugins-bootstrap5 fv-plugins-framework'\r\n          noValidate\r\n          id='kt_login_signup_form'\r\n          onSubmit={formik.handleSubmit}\r\n        >\r\n          {/* begin::Form group First Name */}\r\n          <div className='fv-row mb-8'>\r\n              <label className='form-label fw-bolder text-dark fs-4 required'>Community Name</label>\r\n              <input\r\n                  placeholder='Community Name'\r\n                  type='text'\r\n                  autoComplete='off'\r\n                  {...formik.getFieldProps('communityName')}\r\n                  className={'form-control bg-transparent'}\r\n              />\r\n              {formik.touched.communityName && formik.errors.communityName && (\r\n                <div className='fv-plugins-message-container'>\r\n                    <div className='fv-help-block'>\r\n                    <span role='alert'>{formik.errors.communityName}</span>\r\n                    </div>\r\n                </div>\r\n              )}\r\n          </div>\r\n          {/* end::Form group */}\r\n\r\n          {/* begin::Form group First Name */}\r\n          <div className='fv-row mb-8'>\r\n              <label className='form-label fw-bolder text-dark fs-4 required'>Community Alias</label>\r\n              <input\r\n                  placeholder='Community Alias'\r\n                  type='text'\r\n                  autoComplete='off'\r\n                  {...formik.getFieldProps('communityAlias')}\r\n                  className={'form-control bg-transparent'}\r\n                  disabled={true}\r\n              />\r\n              {formik.touched.communityAlias && formik.errors.communityAlias && (\r\n                <div className='fv-plugins-message-container'>\r\n                    <div className='fv-help-block'>\r\n                    <span role='alert'>{formik.errors.communityAlias}</span>\r\n                    </div>\r\n                </div>\r\n              )}\r\n              {isDuplicateAlias && \r\n                <div className='fv-plugins-message-container'>\r\n                  <div className='fv-help-block'>\r\n                    <span role='alert'>This community alias is taken, please try with another alias</span>\r\n                  </div>\r\n                </div>\r\n              }\r\n          </div>\r\n          {/* end::Form group */}\r\n\r\n          <label\r\n              className='btn btn-outline btn-outline-dashed btn-outline-default p-7 d-flex align-items-center mb-10'\r\n              htmlFor='kt_create_account_form_account_type_personal'\r\n          >\r\n              <span className='w-100 fw-bold text-start'>\r\n              <span className='text-dark fw-bolder d-block fs-4 mb-5'>Address</span>\r\n              {/* begin::Form group Street Name */}\r\n              <div className='fv-row mb-8'>\r\n                  <label className='form-label fw-bolder text-dark fs-4'>Street Name</label>\r\n                  <input\r\n                      placeholder='Street name'\r\n                      type='text'\r\n                      autoComplete='off'\r\n                      {...formik.getFieldProps('streetName')}\r\n                      className={'form-control bg-transparent'}\r\n                  />\r\n                  {formik.touched.streetName && formik.errors.streetName && (\r\n                    <div className='fv-plugins-message-container'>\r\n                        <div className='fv-help-block'>\r\n                        <span role='alert'>{formik.errors.streetName}</span>\r\n                        </div>\r\n                    </div>\r\n                  )}\r\n              </div>\r\n              {/* end::Form group */}\r\n              {/* begin::Form group Street Name */}\r\n              <div className='fv-row mb-8'>\r\n                  <label className='form-label fw-bolder text-dark fs-4'>City</label>\r\n                  <input\r\n                      placeholder='City name'\r\n                      type='text'\r\n                      autoComplete='off'\r\n                      {...formik.getFieldProps('city')}\r\n                      className={'form-control bg-transparent'}\r\n                  />\r\n                  {formik.touched.city && formik.errors.city && (\r\n                    <div className='fv-plugins-message-container'>\r\n                        <div className='fv-help-block'>\r\n                        <span role='alert'>{formik.errors.city}</span>\r\n                        </div>\r\n                    </div>\r\n                  )}\r\n              </div>\r\n              {/* end::Form group */}\r\n              {/* begin::Form group Street Name */}\r\n              <div className='fv-row mb-8'>\r\n                  <label className='form-label fw-bolder text-dark fs-4'>State</label>\r\n                  <select\r\n                      value={formik.getFieldMeta('state').value}\r\n                      className='form-select form-select-lg form-select-solid'\r\n                      name='states'\r\n                      onChange={(e) => handleStateNameChange(e)}\r\n                  >\r\n                  <option value=\"\">Select a State</option>\r\n                  <option value=\"AL\">Alabama</option>\r\n                  <option value=\"AK\">Alaska</option>\r\n                  <option value=\"AZ\">Arizona</option>\r\n                  <option value=\"AR\">Arkansas</option>\r\n                  <option value=\"CA\">California</option>\r\n                  <option value=\"CO\">Colorado</option>\r\n                  <option value=\"CT\">Connecticut</option>\r\n                  <option value=\"DE\">Delaware</option>\r\n                  <option value=\"DC\">District Of Columbia</option>\r\n                  <option value=\"FL\">Florida</option>\r\n                  <option value=\"GA\">Georgia</option>\r\n                  <option value=\"HI\">Hawaii</option>\r\n                  <option value=\"ID\">Idaho</option>\r\n                  <option value=\"IL\">Illinois</option>\r\n                  <option value=\"IN\">Indiana</option>\r\n                  <option value=\"IA\">Iowa</option>\r\n                  <option value=\"KS\">Kansas</option>\r\n                  <option value=\"KY\">Kentucky</option>\r\n                  <option value=\"LA\">Louisiana</option>\r\n                  <option value=\"ME\">Maine</option>\r\n                  <option value=\"MD\">Maryland</option>\r\n                  <option value=\"MA\">Massachusetts</option>\r\n                  <option value=\"MI\">Michigan</option>\r\n                  <option value=\"MN\">Minnesota</option>\r\n                  <option value=\"MS\">Mississippi</option>\r\n                  <option value=\"MO\">Missouri</option>\r\n                  <option value=\"MT\">Montana</option>\r\n                  <option value=\"NE\">Nebraska</option>\r\n                  <option value=\"NV\">Nevada</option>\r\n                  <option value=\"NH\">New Hampshire</option>\r\n                  <option value=\"NJ\">New Jersey</option>\r\n                  <option value=\"NM\">New Mexico</option>\r\n                  <option value=\"NY\">New York</option>\r\n                  <option value=\"NC\">North Carolina</option>\r\n                  <option value=\"ND\">North Dakota</option>\r\n                  <option value=\"OH\">Ohio</option>\r\n                  <option value=\"OK\">Oklahoma</option>\r\n                  <option value=\"OR\">Oregon</option>\r\n                  <option value=\"PA\">Pennsylvania</option>\r\n                  <option value=\"RI\">Rhode Island</option>\r\n                  <option value=\"SC\">South Carolina</option>\r\n                  <option value=\"SD\">South Dakota</option>\r\n                  <option value=\"TN\">Tennessee</option>\r\n                  <option value=\"TX\">Texas</option>\r\n                  <option value=\"UT\">Utah</option>\r\n                  <option value=\"VT\">Vermont</option>\r\n                  <option value=\"VA\">Virginia</option>\r\n                  <option value=\"WA\">Washington</option>\r\n                  <option value=\"WV\">West Virginia</option>\r\n                  <option value=\"WI\">Wisconsin</option>\r\n                  <option value=\"WY\">Wyoming</option>\r\n                  </select>\r\n              </div>\r\n              {/* end::Form group */}\r\n              {/* begin::Form group Street Name */}\r\n              <div className='fv-row mb-8'>\r\n                  <label className='form-label fw-bolder text-dark fs-4'>Zipcode</label>\r\n                  <input\r\n                      placeholder='Zipcode'\r\n                      type='text'\r\n                      autoComplete='off'\r\n                      {...formik.getFieldProps('zipcode')}\r\n                      className={'form-control bg-transparent'}\r\n                  />\r\n                  {formik.touched.zipcode && formik.errors.zipcode && (\r\n                    <div className='fv-plugins-message-container'>\r\n                        <div className='fv-help-block'>\r\n                        <span role='alert'>{formik.errors.zipcode}</span>\r\n                        </div>\r\n                    </div>\r\n                  )}\r\n              </div>\r\n              {/* end::Form group */}\r\n              </span>\r\n          </label>\r\n\r\n          {/* begin::Form group */}\r\n          <div className='text-center'>\r\n              <button\r\n                  type='submit'\r\n                  id='kt_sign_up_submit'\r\n                  className='btn btn-lg btn-primary w-50 mb-5'\r\n                  disabled={formik.isSubmitting || !formik.isValid || loading}\r\n              >\r\n                  {!loading && <span className='indicator-label'>Update</span>}\r\n                  {loading && (\r\n                      <span className='indicator-progress' style={{display: 'block'}}>\r\n                      Please wait...{' '}\r\n                      <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                      </span>\r\n                  )}\r\n              </button>\r\n          </div>\r\n          {/* end::Form group */}\r\n        </form>\r\n      </div>\r\n    </Modal>,\r\n    modalsRoot\r\n  )\r\n}\r\n\r\nexport {EditCommunity}\r\n","import {useState, useEffect} from 'react'\r\nimport {KTCard} from '../../../_metronic/helpers'\r\nimport {CommunityListHeader} from './components/CommunityListHeader'\r\nimport { CommunityListTable } from './components/CommunityTable'\r\nimport { CreateCommunity } from './components/CreateCommunity'\r\nimport { useAuth } from '../auth'\r\nimport { AlertDanger, AlertSuccess } from '../alerts/Alerts'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { EditCommunity } from './components/EditCommunity'\r\nimport { getCommunityList } from './api'\r\n\r\nconst CommunityList = () => {\r\n    const [loading, setLoading] = useState<boolean>(true)\r\n    const [showCreateCommunityModal, setShowCreateCommunityModal] = useState<boolean>(false)\r\n    const [showCommunityUpdateModal, setShowCommunityUpdateModal] = useState<boolean>(false)\r\n\r\n    const [offset] = useState<number>(0)\r\n    const [limit] = useState<number>(10)\r\n    const navigate = useNavigate()\r\n    const [communityList, setCommunityList] = useState<Array<any>>([])\r\n    const {currentUser, auth} = useAuth()\r\n    const [selectedPage, setSelectedPage] = useState<any>(1)\r\n    const [currentPage, setCurrentPage] = useState<any>(1)\r\n    const[totNumOfPage, setTotNumOfPage] = useState<any>(0)\r\n    const[noOfRecords, setNoOfRecords] = useState<any>(0)\r\n    const [warnings, setWarnings] = useState<string>(\"\")\r\n    const [showWarnings, setShowWarnings] = useState<boolean>(false)\r\n    const [searchString, setSearchString] = useState<string>(\"\")\r\n    const [successResMessage, setSuccessResMessage] = useState<string>('')\r\n    const [failureResMessage, setFailureResMessage] = useState<string>('')\r\n    const [checked, setChecked] = useState<boolean>(true)\r\n    const [checked1, setChecked1] = useState<boolean>(true)\r\n    const [deleteRecord, setDeleteRecord] = useState<Array<string>>([])\r\n    const [selectedAll, setSelectedAll] = useState<boolean>(false)\r\n    const [deleting, setDeleting] = useState<boolean>(false)\r\n    const [comIdToEdit, setComIdToEdit] = useState<any>(null)\r\n    const [currentCommDataToEdit, setCurrentCommDataToEdit] = useState<any>({})\r\n\r\n    let responseSuccessMessage = localStorage.getItem(\"responsesuccessmsg\");\r\n    let responseFailureMessage = localStorage.getItem(\"responsefailuresmsg\")\r\n\r\n    const [resSuccessMessage, setResSuccessMessage] = useState(responseSuccessMessage);\r\n    const [resFailureMessage, setResFailureMessage] = useState(responseFailureMessage);\r\n\r\n    if(warnings != \"\") {\r\n        setTimeout(() => {\r\n          setShowWarnings(false);\r\n          setTimeout(() => {\r\n            setWarnings(\"\");\r\n          }, 300);\r\n        }, 5000);\r\n    }\r\n\r\n    if(successResMessage) {\r\n        setTimeout(() => {\r\n            setChecked(false)\r\n            setTimeout(() => {\r\n                setSuccessResMessage(\"\");\r\n            }, 200);\r\n        }, 5000);\r\n    }\r\n    \r\n    if(failureResMessage) {\r\n        setTimeout(() => {\r\n            setChecked(false)\r\n            setTimeout(() => {\r\n                setFailureResMessage(\"\");\r\n            }, 200);\r\n        }, 5000);\r\n    }\r\n\r\n    if(responseSuccessMessage) {\r\n        setTimeout(() => {\r\n          localStorage.removeItem(\"responsesuccessmsg\");\r\n          setChecked1(false);\r\n          setTimeout(() => {\r\n            setResSuccessMessage(\"\");\r\n          }, 300);\r\n        }, 5000);\r\n    }\r\n    \r\n    if(responseFailureMessage) {\r\n        setTimeout(() => {\r\n            localStorage.removeItem(\"responsefailuresmsg\");\r\n            setChecked1(false);\r\n            setTimeout(() => {\r\n                setResFailureMessage(\"\");\r\n            }, 300);\r\n        }, 5000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(auth?.user?.role != 1) {\r\n          navigate('/error/404')\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getCommunityList(searchString, currentUser?.companyId, offset, limit)\r\n        .then((response) => {\r\n            if(response.data.success) {\r\n                setCommunityList(response.data.communityList)\r\n                setTotNumOfPage(response.data.totalPageNum)\r\n                setNoOfRecords(response.data.noOfRecords)\r\n                setSelectedPage(1)\r\n                setCurrentPage(1)\r\n                setLoading(false)\r\n            }\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n    }, [searchString])\r\n\r\n    const handleChangeSelection = (id: string, selectOption: boolean) => {\r\n        const findCommunity = communityList.find((community: any) => {\r\n            return community.id === id\r\n        })\r\n        findCommunity.selected = selectOption\r\n        return findCommunity\r\n    }\r\n\r\n    const fetchNextData = (pageNum: any) => {\r\n        if(pageNum > 0 && pageNum <= totNumOfPage) {\r\n            setLoading(true)\r\n            if(deleteRecord.length > 0) {\r\n                setSelectedAll(false)\r\n                const newCommunityList: Array<any> = []\r\n                communityList.map((community: any) => {\r\n                    newCommunityList.push(handleChangeSelection(community.id, false))\r\n                })\r\n                setCommunityList(newCommunityList)\r\n                setDeleteRecord([])\r\n            }\r\n            const skip = (parseInt(pageNum) - 1) * limit\r\n\r\n            getCommunityList(\r\n                searchString,\r\n                currentUser?.companyId,\r\n                skip,\r\n                limit,\r\n            )\r\n            .then((response) => {\r\n                if(response.data.success) {\r\n                    setCommunityList(response.data.communityList)\r\n                    setTotNumOfPage(response.data.totalPageNum)\r\n                    setNoOfRecords(response.data.noOfRecords)\r\n                    setLoading(false)\r\n                    setSelectedPage(pageNum)\r\n                    setCurrentPage(pageNum)\r\n                }\r\n            })\r\n           \r\n        } else {\r\n            setWarnings('Invalid page number provided, please check it.')\r\n            setShowWarnings(true)\r\n        }\r\n    }\r\n\r\n    const handleSearchBarChange = (event: any) => {\r\n        setSearchString(event.target.value)\r\n    }\r\n\r\n    const getCommmunityDetail = (id: any) => {\r\n        return new Promise<any>((resolve, reject) => {\r\n            try {\r\n                const findCommunity = communityList.find((community: any) => {\r\n                    return community.id === id\r\n                })\r\n    \r\n                resolve(findCommunity)\r\n            } catch (error) {\r\n                reject(error)\r\n            }\r\n        })\r\n    }\r\n\r\n    const showUpdateModal = (cid: any) => {\r\n        setComIdToEdit(cid)\r\n        getCommmunityDetail(cid)\r\n        .then((comData: any) => {\r\n            if(comData) {\r\n                setCurrentCommDataToEdit(comData)\r\n            }\r\n        }) \r\n        .then(() => setShowCommunityUpdateModal(true))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {successResMessage !== undefined && successResMessage !== null && successResMessage !== \"\" ? (\r\n                <AlertSuccess message={successResMessage} checked={checked} />\r\n            ) : null }\r\n\r\n            {failureResMessage !== undefined && failureResMessage !== null && failureResMessage !== \"\" ? (\r\n                <AlertDanger message={failureResMessage} checked={checked} />\r\n            ) : null }\r\n\r\n            {resSuccessMessage !== null && resSuccessMessage !== undefined && resSuccessMessage !== \"\"  ? (\r\n                <AlertSuccess message={resSuccessMessage} checked={checked1} />\r\n            ) : null}\r\n\r\n            {resFailureMessage !== null && resFailureMessage !== undefined && resFailureMessage !== \"\"  ? (\r\n                <AlertDanger message={resFailureMessage} checked={checked1} />\r\n            ) : null}\r\n\r\n            <KTCard>\r\n                <CommunityListHeader \r\n                    setShowCreateCommunityModal={setShowCreateCommunityModal} \r\n                    handleSearchBarChange={handleSearchBarChange}\r\n                    searchString={searchString}\r\n                />\r\n                <CommunityListTable \r\n                    loading={loading}\r\n                    showCreateCommunityModal={showCreateCommunityModal}\r\n                    setShowCreateCommunityModal={setShowCreateCommunityModal}\r\n                    showCommunityUpdateModal={showCommunityUpdateModal}\r\n                    setShowCommunityUpdateModal={setShowCommunityUpdateModal}\r\n                    communityList={communityList}\r\n                    setCommunityList={setCommunityList}\r\n                    totNumOfPage={totNumOfPage}\r\n                    setTotNumOfPage={setTotNumOfPage}\r\n                    selectedPage={selectedPage}\r\n                    setSelectedPage={setSelectedPage}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    successResMessage={successResMessage}\r\n                    setSuccessResMessage={setSuccessResMessage}\r\n                    failureResMessage={failureResMessage}\r\n                    setFailureResMessage={setFailureResMessage}\r\n                    deleteRecord={deleteRecord}\r\n                    setDeleteRecord={setDeleteRecord}\r\n                    selectedAll={selectedAll}\r\n                    setSelectedAll={setSelectedAll}\r\n                    deleting={deleting}\r\n                    setDeleting={setDeleting}\r\n                    limit={limit}\r\n                    setChecked={setChecked}\r\n                    setChecked1={setChecked1}\r\n                    setResSuccessMessage={setResSuccessMessage}\r\n                    setResFailureMessage={setResFailureMessage}\r\n                    setNoOfRecords={setNoOfRecords}\r\n                    noOfRecords={noOfRecords}\r\n                    fetchNextData={fetchNextData}\r\n                    showUpdateModal={showUpdateModal}\r\n                    searchString={searchString}\r\n                />\r\n            </KTCard>\r\n            <CreateCommunity \r\n                show={showCreateCommunityModal} \r\n                handleClose={() => setShowCreateCommunityModal(false)} \r\n                offset={offset}\r\n                limit={limit}\r\n                setSuccessResMessage={setSuccessResMessage}\r\n                setFailureResMessage={setFailureResMessage}\r\n                setChecked={setChecked}\r\n                _setCommunityList={setCommunityList}\r\n                setSelectedPage={setSelectedPage}\r\n                setCurrentPage={setCurrentPage}\r\n                setTotNumOfPage={setTotNumOfPage}\r\n                setNoOfRecords={setNoOfRecords}\r\n            />\r\n            <EditCommunity \r\n                show={showCommunityUpdateModal} \r\n                handleClose={() => setShowCommunityUpdateModal(false)}\r\n                currentCommDataToEdit={currentCommDataToEdit}\r\n                comIdToEdit={comIdToEdit}\r\n                offset={offset}\r\n                limit={limit}\r\n                setSuccessResMessage={setSuccessResMessage}\r\n                setFailureResMessage={setFailureResMessage}\r\n                setChecked={setChecked}\r\n                _setCommunityList={setCommunityList}\r\n                selectedPage={selectedPage}\r\n                searchString={searchString}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CommunityList","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { FC } from 'react'\r\n\r\ntype Props = {\r\n    totalNoOfRecords: any\r\n    selectedPage: any\r\n    limit: number\r\n    entityName: string\r\n}\r\n\r\nconst NoOfRecords: FC<Props> = ({\r\n    totalNoOfRecords,\r\n    selectedPage,\r\n    limit,\r\n    entityName\r\n}) => {\r\n\r\n    return (\r\n        <div className='row user-numb'>\r\n            <div className='d-flex'>\r\n                <span className='fs-6'>{((selectedPage - 1) * limit) + 1}</span>\r\n                <span className='fs-6'>{'-'}</span>\r\n                <span className='fs-6'>{(selectedPage * limit) >= totalNoOfRecords ? totalNoOfRecords : (selectedPage * limit)}</span>\r\n                <span className='fs-6 ms-2'>of</span>\r\n                <span className='fs-6 ms-2'>{totalNoOfRecords}</span>\r\n                <span className='fs-6 ms-1'>{entityName}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {NoOfRecords}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport { FC, useState } from 'react'\r\nimport clsx from 'clsx'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { KTSVG } from '../../../_metronic/helpers'\r\n\r\ntype Props = {\r\n    totalNumberOfPages: number\r\n    fetchNextData: Function\r\n    selectedPage: any\r\n    setSelectedPage: any\r\n    currentPage: any\r\n    setCurrentPage: any\r\n}\r\n\r\nconst Pagination: FC<Props> = ({ \r\n    totalNumberOfPages, \r\n    setSelectedPage, \r\n    fetchNextData, \r\n    selectedPage, \r\n    currentPage,\r\n    setCurrentPage\r\n}) => {\r\n\r\n    const handleChange = (event: any) => {\r\n        setSelectedPage(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className='row'>\r\n            <div className='d-flex'>\r\n                {currentPage > 1 && \r\n                    <button \r\n                        style={{ \r\n                            border: '#0000',\r\n                            background: '#009ef7',\r\n                            borderRadius: '5px',\r\n                            color: '#fff',\r\n                            height: '30px',\r\n                            fontSize: '15px'\r\n                        }}\r\n                        onClick={() => fetchNextData(selectedPage - 1)}\r\n                        disabled={selectedPage == 1}\r\n                    >\r\n                        Prev\r\n                    </button>\r\n                }\r\n                <div className='d-flex my-auto'>\r\n                    <div className='ms-4 d-flex flex-column'>\r\n                        <input \r\n                            type=\"text\" \r\n                            style={{ width: '40px', height: '28px', borderColor: '#0000', textAlign: 'center' }}\r\n                            value={ selectedPage }\r\n                            onChange={(event) => handleChange(event)}\r\n                            disabled={totalNumberOfPages <= 1}\r\n                        />\r\n                    </div>\r\n                    \r\n                    <span style={{ marginTop: '5px' }} className='ms-2 me-3'>Of</span>\r\n                    <span style={{ marginTop: '5px' }} className='ms-1 me-4'>{totalNumberOfPages}</span>\r\n                </div>\r\n                {currentPage < totalNumberOfPages && \r\n                    <button \r\n                        style={{ \r\n                            border: '#0000',\r\n                            background: '#009ef7',\r\n                            borderRadius: '5px',\r\n                            color: '#fff',\r\n                            height: '30px',\r\n                            fontSize: '15px'\r\n                        }}\r\n                        onClick={() => fetchNextData(parseInt(selectedPage) + 1)}\r\n                        disabled={selectedPage == totalNumberOfPages}\r\n                    >\r\n                        Next\r\n                    </button>\r\n                }\r\n\r\n                {totalNumberOfPages > 1 && \r\n                    <button \r\n                        className='ms-4'\r\n                        style={{ \r\n                            border: '#0000',\r\n                            background: '#009ef7',\r\n                            borderRadius: '5px',\r\n                            color: '#fff',\r\n                            height: '30px',\r\n                            fontSize: '15px'\r\n                        }}\r\n                        onClick={() => fetchNextData(selectedPage)}\r\n                    >\r\n                        Go to\r\n                    </button>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport {Pagination}\r\n"],"names":["CommunitySearchComponent","props","className","iconName","type","placeholder","onChange","e","handleSearchBarChange","CommunityToolbar","useNavigate","onClick","setShowCreateCommunityModal","CommunityListHeader","searchString","noOfRecords","stateMap","CommunityListTableRow","communityName","communityAlias","active","noOfFiles","street","city","state","zip","showUpdateModal","id","openDialogForSingleDeletion","DeleteConfirmationBoxForCommunity","style","display","closeDialog","title","handleBulkDeletion","deleting","API_URL","process","CREATE_COMMUNITY","UPDATE_COMMUNITY","GET_COMMUNITY_LIST","ACTIVATE_COMMUNITY","DEACTIVATE_COMMUNITY","DELETE_COMMUNITIES","CHECK_ALIAS_EXIST","CHECK_ALIAS_EXIST_FOR_UPDATE","createCommunity","companyId","creator","streetName","zipcode","offset","limit","axios","headers","getCommunityList","updateCommunities","communityId","CommunityListTable","useAuth","currentUser","setCommunityList","setCurrentCommunity","currentCommunity","useEffect","invitationList","deleteRecord","length","setSelectedAll","handleChangeSelected","newCommunityList","communityList","map","community","newCommunity","selected","push","handleChange","target","value","checked","setDeleteRecord","record","filter","rec","document","getElementById","closeDialogForSingleDeletion","handleActivate","setDeleting","activateCommunity","then","response","data","success","setTotNumOfPage","totalPageNum","setNoOfRecords","activeCommunities","setSelectedPage","setCurrentPage","setSuccessResMessage","message","setChecked","setFailureResMessage","handleDeactivate","deactivateCommunity","overflowX","warnings","showWarnings","communityIds","localStorage","setItem","window","location","reload","selectedAll","community_name","community_alias","created","setShowCommunityUpdateModal","loading","NoOfRecords","totalNoOfRecords","selectedPage","entityName","totNumOfPage","Pagination","totalNumberOfPages","fetchNextData","currentPage","useIntl","intl","React","Context","invariantIntlContext","communityCreationSchema","Yup","shape","min","max","required","modalsRoot","body","CreateCommunity","show","handleClose","_setCommunityList","useState","setLoading","isDuplicateAlias","setIsDuplicateAlias","formik","useFormik","initialValues","validationSchema","onSubmit","values","setStatus","setSubmitting","alias","exist","resetForm","catch","err","createPortal","Modal","tabIndex","dialogClassName","onHide","backdrop","noValidate","handleSubmit","autoComplete","getFieldProps","touched","errors","role","event","setFieldValue","htmlFor","getFieldMeta","name","disabled","isSubmitting","isValid","communityUpdateSchema","EditCommunity","currentCommDataToEdit","comIdToEdit","showCreateCommunityModal","showCommunityUpdateModal","navigate","auth","setWarnings","setShowWarnings","setSearchString","successResMessage","failureResMessage","checked1","setChecked1","setComIdToEdit","setCurrentCommDataToEdit","responseSuccessMessage","getItem","responseFailureMessage","resSuccessMessage","setResSuccessMessage","resFailureMessage","setResFailureMessage","setTimeout","removeItem","user","console","log","undefined","pageNum","selectOption","findCommunity","find","handleChangeSelection","skip","parseInt","cid","Promise","resolve","reject","error","comData","border","background","borderRadius","color","height","fontSize","width","borderColor","textAlign","marginTop"],"sourceRoot":""}